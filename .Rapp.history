leporinum.barplots.lea.K3
leporinum.barplots.lea.K3 <- leporinum.barplots.lea[[(bestK-1)]]
leporinum.barplots.lea.K3
barplot.gg.og
barplot.gg
leporinum.lea.df    <- leporinum.barplots.lea.K3$data
leporinum.lea.df
leporinum.lea.df$indv <- factor(leporinum.lea.df,levels=indv.order)
leporinum.barplots.lea.K3$data <- leporinum.lea.df
admixtureGrob <- function(x,lev,barplot.title=""){#
	bp    <- x#
	bp.df <- bp$data#
	bp.df$indv <- factor(bp.df,levels=lev)#
	bp$data <- bp.df#
	bp.slim <- bp + ggplot2::theme(axis.text.x=ggplot2::element_blank(),axis.text.y=ggplot2::element_blank(),axis.ticks.x=ggplot2::element_blank(),axis.ticks.y=ggplot2::element_blank(),legend.position = "none",title=ggplot2::element_blank(),axis.line=ggplot2::element_blank())#
	bp.grob <- gridExtra::ggplotGrob(bp.slim)#
	bp.gtab <- gridExtra::arrangeGrob(bp.grob,top=barplot.title)#
	bp.gtab#
}
leporinum.lea.gtab <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3")
admixtureGrob <- function(x,lev,barplot.title=""){#
	bp    <- x#
	bp.df <- bp$data#
	bp.df$indv <- factor(bp.df,levels=lev)#
	bp$data <- bp.df#
	bp.slim <- bp + ggplot2::theme(axis.text.x=ggplot2::element_blank(),axis.text.y=ggplot2::element_blank(),axis.ticks.x=ggplot2::element_blank(),axis.ticks.y=ggplot2::element_blank(),legend.position = "none",title=ggplot2::element_blank(),axis.line=ggplot2::element_blank())#
	bp.grob <- ggplot2::ggplotGrob(bp.slim)#
	bp.gtab <- gridExtra::arrangeGrob(bp.grob,top=barplot.title)#
	bp.gtab#
}
leporinum.lea.gtab <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3")
figure.gtab <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,2,3),nrow=1),respect=TRUE)
plot(figure.gtab)
plot(leporinum.barplots.lea.K3)
plot(leporinum.barplots.lea[[1]])
plot(leporinum.barplots.lea[[2]])
leporinum.barplots.lea.K3
leporinum.barplots.lea.K3 <- leporinum.barplots.lea[[(bestK-1)]]
leporinum.barplots.lea.K3
admixtureGrob <- function(x,lev,barplot.title=""){#
	bp         <- x#
	bp.df      <- bp$data#
	bp.df$indv <- factor(bp.df,levels=lev)#
	bp$data    <- bp.df#
	bp.slim    <- bp + ggplot2::theme(axis.text.x=ggplot2::element_blank(),axis.text.y=ggplot2::element_blank(),axis.ticks.x=ggplot2::element_blank(),axis.ticks.y=ggplot2::element_blank(),legend.position = "none",title=ggplot2::element_blank(),axis.line=ggplot2::element_blank())#
	bp.grob    <- ggplot2::ggplotGrob(bp.slim)#
	bp.gtab    <- gridExtra::arrangeGrob(bp.grob,top=barplot.title)#
	bp.gtab#
}
leporinum.lea.gtab <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3")
plot(leporinum.lea.gtab)
leporinum.barplots.lea.K3 <- leporinum.barplots.lea[[(bestK-1)]]
leporinum.lea.df      <- leporinum.barplots.lea.K3$data
leporinum.lea.df$indv
indv.order
length(leporinum.lea.df$indv)
length(leporinum.lea.df$indv)/length(indv.order)
leporinum.barplots.lea.K3$data <- leporinum.lea.df
leporinum.barplots.lea.K3
leporinum.lea.df
leporinum.lea.df      <- leporinum.barplots.lea.K3$data
leporinum.lea.df$indv <- factor(leporinum.lea.df$indv,levels=indv.order)
admixtureGrob <- function(x,lev,barplot.title=""){#
	bp         <- x#
	bp.df      <- bp$data#
	bp.df$indv <- factor(bp.df$indv,levels=lev)#
	bp$data    <- bp.df#
	bp.slim    <- bp + ggplot2::theme(axis.text.x=ggplot2::element_blank(),axis.text.y=ggplot2::element_blank(),axis.ticks.x=ggplot2::element_blank(),axis.ticks.y=ggplot2::element_blank(),legend.position = "none",title=ggplot2::element_blank(),axis.line=ggplot2::element_blank())#
	bp.grob    <- ggplot2::ggplotGrob(bp.slim)#
	bp.gtab    <- gridExtra::arrangeGrob(bp.grob,top=barplot.title)#
	bp.gtab#
}
leporinum.barplots.lea.K3 <- leporinum.barplots.lea[[(bestK-1)]]
leporinum.lea.gtab <- admixtureGrob(eporinum.barplots.lea.K3,lev=indv.order)
leporinum.lea.gtab <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order)
plot(leporinum.lea.gtab )
figure.gtab <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,2,3),nrow=1),respect=TRUE)
plot(figure.gtab)
leporinum.lea.gtab <- admixtureGrob(eporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3")#
figure.gtab        <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,2,3),nrow=1),respect=TRUE)
leporinum.lea.gtab <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3")#
figure.gtab        <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,2,3),nrow=1),respect=TRUE)#
plot(figure.gtab)
figure.gtab        <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,1,1,2,3),nrow=1),respect=TRUE)#
plot(figure.gtab)
figure.gtab        <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab),layout_matrix=matrix(c(1,1,1,2,3),nrow=1),respect=FALSE)
plot(figure.gtab)
leporinum.barplots.fs    <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/fastStructure/empirical/Oxyrhabdium-leporinum_BestSNP")
statlog  <- read.table("/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/fastStructure/empirical/Oxyrhabdium-leporinum_BestSNP/Oxyrhabdium-leporinum_BestSNP_fastStructure.margLlog", header=T)
kmax     <- max(statlog[,"K"])#
statname <- "MarginalLikelihood"
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==max(kstat.df[,"mean.stat"])),"K"]
bestK
leporinum.barplots.fs.K8 <- leporinum.barplots.fs[[(bestK-1)]]
leporinum.fs.gtab <- admixtureGrob(leporinum.barplots.fs.K8,lev=indv.order,barplot.title="fastStructure K=8")
plot(leporinum.fs.gtab)
figure.gtab        <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab,leporinum.fs.gtab),layout_matrix=matrix(c(1,1,1,2,3,4),nrow=1),respect=FALSE)#
plot(figure.gtab)
leporinum.barplots.fs.K8$scales$scales
style.gg <- barplot.slim.gg
style.gg$data <- NULL
admixtureGrob <- function(x,lev,barplot.title="",style.gg=NULL){#
	bp         <- x#
	bp.df      <- bp$data#
	bp.df$indv <- factor(bp.df$indv,levels=lev)#
	if(!is.null(style.gg)){#
		style.gg$data <- bp.df#
		bp <- style.gg#
	} else {#
		bp$data    <- bp.df#
	}#
	bp.slim    <- bp + ggplot2::theme(axis.text.x=ggplot2::element_blank(),axis.text.y=ggplot2::element_blank(),axis.ticks.x=ggplot2::element_blank(),axis.ticks.y=ggplot2::element_blank(),legend.position = "none",title=ggplot2::element_blank(),axis.line=ggplot2::element_blank())#
	bp.grob    <- ggplot2::ggplotGrob(bp.slim)#
	bp.gtab    <- gridExtra::arrangeGrob(bp.grob,top=barplot.title)#
	bp.gtab#
}
leporinum.lea.gtab2 <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3",style.gg=barplot.slim.gg)
leporinum.lea.gtab2 <- admixtureGrob(leporinum.barplots.lea.K3,lev=indv.order,barplot.title="LEA K=3",style.gg=NULL)
plot(figure.gtab)
leporinum.barplots.dapc  <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/Oxyrhabdium-leporinum_DAPC.BIClog")
leporinum.barplots.dapc  <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/")
xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/"; labels=NULL; save.as=file.path(getwd(),"admixturePlots.pdf"); userun=1; save=T
if(!is.null(xdir)){#
		# Character vector with paths to input files#
		qfiles         <- c(list.files(xdir, full.names=T, pattern="log_f$"), list.files(xdir, full.names=T, pattern="Qlog$"))#
		save.as        <- file.path(xdir,"admixturePlots.pdf")#
		labels <- NULL#
	} else {#
		qfiles <- x#
	}
length(grep("log_f$", qfiles))>0
length(grep("Qlog$", qfiles))==1
qtab <- read.table(qfiles, header=T,sep="\t")
qtab
nrow(unique( qtab[,c("indv", "pop","assignment","K"))
nrow(unique( qtab[,c("indv", "pop","assignment","K")])
nrow(unique( qtab[,c("indv", "pop","assignment","K")]))
nrow(unique( qtab[,c("indv", "pop","K")]))
nrow(unique(qtab[,c("indv", "pop","K")])) == nrow(qtab)
!"replicate" %in% colnames(qtab)
qtab[1:10,]
test <- qtab
test2 <- order(test[,"K"],test[,"pop"],test[,"indv"])
length(test2)
test2[1]
test2[1:10]
floor(2)
ceiling(2)
floor(nrow(qtab)/nrow(unique(qtab[,c("indv", "pop","K")]))) == ceiling(nrow(qtab)/nrow(unique(qtab[,c("indv", "pop","K")])))
admixturePlots <- function(x, xdir=NULL, labels=NULL, save.as=file.path(getwd(),"admixturePlots.pdf"), userun=1,save=T){#
	if(!is.null(xdir)){#
		# Character vector with paths to input files#
		qfiles         <- c(list.files(xdir, full.names=T, pattern="log_f$"), list.files(xdir, full.names=T, pattern="Qlog$"))#
		save.as        <- file.path(xdir,"admixturePlots.pdf")#
		labels <- NULL#
	} else {#
		qfiles <- x#
	}#
	if(length(grep("log_f$", qfiles))>0){#
		# Read qfiles into R#
		qlist      <- pophelper::readQ(files=qfiles)#
		names.df.path  <- list.files(xdir, full.names=T, pattern="_sampleIDs.txt$")#
		samplenames.df <- read.table(names.df.path, header=T)#
		samplenames    <- samplenames.df$IndvNames#
	} else {#
		if(length(grep("Qlog$", qfiles))==1){#
			qtab <- read.table(qfiles, header=T,sep="\t")#
			if(!"replicate" %in% colnames(qtab)){#
				if(nrow(unique(qtab[,c("indv", "pop","K")])) == nrow(qtab)){#
					qtab[,"replicate"] <- 1#
				} else {#
					if(floor(nrow(qtab)/nrow(unique(qtab[,c("indv", "pop","K")]))) == ceiling(nrow(qtab)/nrow(unique(qtab[,c("indv", "pop","K")])))){#
						qtab <- qtab[order(test[,"K"], test[,"pop"], test[,"indv"]),]#
						qtab[,"replicate"] <- rep(1:(nrow(qtab)/nrow(unique(qtab[,c("indv", "pop","K")]))),each=nrow(unique(qtab[,c("indv", "pop","K")])))#
					} else {#
						stop("number of replicates differ not equal")#
					}#
				}#
			}#
			if(all(is.na(qtab[,"replicate"]))){#
				qtab$replicate <- 1#
			}#
			qid         <- unique(qtab[,c("K","replicate")])#
			### List of Q matrices (data frames) from the rectangular Qlog data frame#
			qlist        <- lapply(X=1:nrow(qid), FUN=function(x){resB=do.call(cbind,lapply(X=1:qid[x,"K"], FUN=function(z) { A=qtab[which(qtab[,"replicate"]==qid[x,"replicate"] & qtab[,"K"]==qid[x,"K"] ),]; A[A[,"cluster"]==z, "assignment"]})); colnames(resB)=paste0("Cluster",1:qid[x,"K"]); rownames(resB)=1:nrow(resB); resC <- as.data.frame(resB); resC})#
			names(qlist) <- sapply(X=1:nrow(qid),FUN=function(x) paste0("structure_K",qid[x,"K"],"r",qid[x,"replicate"],".log_f"))#
			samplenames  <- qtab[1:length(unique(qtab[,"individual"])),"individual"]#
			#### Need to set the following attributes for each data frame in qlist or else alignK function will fail.#
			# ind, k, loci, reps, elpd, mvll, vll # each is an integer except elpd and mvll, which are numeric floats#
			# This loop adds arbitrary values for required attributes, allowing us to use the alignK function for qmatrices programs other than STRUCTURE#
			for(i in 1:length(qlist)){#
				attr(qlist[[i]], 'ind')    <- nrow(qlist[[i]])#
				attr(qlist[[i]], 'k')      <- ncol(qlist[[i]])#
				attr(qlist[[i]], 'loci')   <- 5000#
				attr(qlist[[i]], 'burnin') <- 9999#
				attr(qlist[[i]], 'reps')   <- 99999#
				attr(qlist[[i]], 'elpd')   <- -99999.9#
				attr(qlist[[i]], 'mvll')   <- -99999.9#
				attr(qlist[[i]], 'vll')    <- 2000#
			}#
		} else {#
			stop("Q matrices must be supplied in either 'log_f' files produced by STRUCTURE (or 'run_structure' wrapper function) or 'Qlog' files like those produced by 'run_SNMF', 'run_fastStructure', or 'run_DAPC' functions")#
		}#
	}#
	numind     <- nrow(qlist[[1]])#
	if(!is.null(labels)){#
		samplenames <- labels#
	} else {#
		if(is.null(xdir)){#
			samplenames <- 1:numind#
		}#
	}#
	label.size <- min((288/numind),7)#
	# Set rownames of each matrix in qlist as the names of samples#
	qlist2 <- lapply(X=1:length(qlist), FUN=function(x) {A=qlist[[x]]; rownames(A)=samplenames; A})#
	# Aligned qlist#
	aqlist <- pophelper::alignK(qlist)#
	# List of aligned q matrices with rownames as samplenames#
	aqlist2   <- lapply(X=1:length(aqlist), FUN=function(x) {A=aqlist[[x]]; rownames(A)=samplenames; A})#
	aqlist2.K <- sapply(aqlist2, ncol)#
	kmax      <- max(aqlist2.K)#
	numruns   <- max(table(aqlist2.K))#
	### Just use the first run if userun are al greater than the number of runs#
	if(any(userun <= numruns)){#
		userun <- userun[userun %in% 1:numruns]#
	} else {#
		userun <- 1#
	}#
	#for(i in 1:unique(aqlist2.K)){#
	#	aqlist.i <- do.call(cbind,aqlist2[aqlist2.K == i])#
	#	margin()#
	#}#
	# List of aligned q matrices for first run of each K. Will edit this to use instead the mean across runs.#
	slist      <- aqlist2[match(1:kmax, sapply(aqlist2, ncol))]#
	slist.list <- list(); length(slist.list) <- numruns#
#	slist      <- qlist2[match(1:kmax,sapply(qlist2,ncol))+(userun-1)]#
	#slist2     <- list(); length(slist2) <- length(slist)#
	for(i in 1:numruns){#
		slist.list[[i]] <- aqlist2[match(1:kmax,sapply(aqlist2, ncol)) + (i-1)]#
	}#
	slist.list2 <- slist.list[userun]#
	if(length(slist.list2)>1){#
		### Average across runs#
		for(i in 1:kmax){#
			X    <- lapply(X=slist.list2, FUN=function(x){ c(t(x[[i]])) })#
			Y    <- do.call(rbind, X)#
			Z    <- colMeans(Y)#
			zmat <- matrix(Z,ncol=i,byrow=T)#
			rownames(zmat) <- samplenames#
			colnames(zmat) <- colnames(slist[[i]])#
			zdf            <- as.data.frame(zmat)#
			slist2[[i]]    <- zdf#
			#Y <- array(Y, dim=c(dim(X[[1]]), length(X)))#
			#apply(X=Y, MARGIN=c(1, 2), FUN=mean, na.rm = TRUE)#
		}#
	} else {#
		slist2    <- slist.list2[[1]]#
	}#
	Krange      <- 1:kmax#
	Krange.plot <- 2:kmax#
	# empty list to hold admixture plots#
	admixturePlot <- list(); length(admixturePlot)   <- length(Krange.plot)#
	for(K in 2:kmax){#
		i=(K-1)#
		if(K <= 15){#
			myCols          <- goodcolors2(n=15)[1:K]#
		}#
		if(K>15){#
			myCols          <- c(goodcolors2(n=15), sample(adegenet::funky(100), size=K-15))#
		}#
		q.matrix  <- slist2[[K]]#
		#q.matrix  <- slist[[K]]#
		# test <- ape::ladderize(phangorn::NJ(dist(q.matrix)))#
		### Attempt to reorder individuals in the barplot by their population assignment proportions.#
		indv.pop           <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))[1]})#
		posterior.df       <- data.frame(indv=rep(rownames(q.matrix),ncol(q.matrix)), pop=rep(colnames(q.matrix),each=nrow(q.matrix)), assignment=c(unlist(unname(q.matrix))))#
		posterior.df$indv  <- factor(posterior.df$indv, levels = names(sort(indv.pop)))#
		#if(debug) message(cat("\r",paste0("K=",K," step 7.3")))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Admixture Proportion",y="",fill="Cluster",title=paste0("K = ",K)) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
	}#
	if(save){#
		pdf(height=6,width=10,file=save.as,onefile=TRUE)#
			lapply(X=admixturePlot, FUN=print)#
		dev.off()#
	}#
	admixturePlot#
}
leporinum.barplots.dapc  <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/")
qtab
colnames(qtab)
admixturePlots <- function(x, xdir=NULL, labels=NULL, save.as=file.path(getwd(),"admixturePlots.pdf"), userun=1,save=T){#
	if(!is.null(xdir)){#
		# Character vector with paths to input files#
		qfiles         <- c(list.files(xdir, full.names=T, pattern="log_f$"), list.files(xdir, full.names=T, pattern="Qlog$"))#
		save.as        <- file.path(xdir,"admixturePlots.pdf")#
		labels <- NULL#
	} else {#
		qfiles <- x#
	}#
	if(length(grep("log_f$", qfiles))>0){#
		# Read qfiles into R#
		qlist      <- pophelper::readQ(files=qfiles)#
		names.df.path  <- list.files(xdir, full.names=T, pattern="_sampleIDs.txt$")#
		samplenames.df <- read.table(names.df.path, header=T)#
		samplenames    <- samplenames.df$IndvNames#
	} else {#
		if(length(grep("Qlog$", qfiles))==1){#
			qtab <- read.table(qfiles, header=T,sep="\t")#
			if(!"replicate" %in% colnames(qtab)){#
				if(nrow(unique(qtab[,c("individual", "cluster","K")])) == nrow(qtab)){#
					qtab[,"replicate"] <- 1#
				} else {#
					if(floor(nrow(qtab)/nrow(unique(qtab[,c("individual", "cluster","K")]))) == ceiling(nrow(qtab)/nrow(unique(qtab[,c("individual", "cluster","K")])))){#
						qtab <- qtab[order(test[,"K"], test[,"cluster"], test[,"individual"]),]#
						qtab[,"replicate"] <- rep(1:(nrow(qtab)/nrow(unique(qtab[,c("individual", "cluster","K")]))),each=nrow(unique(qtab[,c("individual", "cluster","K")])))#
					} else {#
						stop("number of replicates differ not equal")#
					}#
				}#
			}#
			if(all(is.na(qtab[,"replicate"]))){#
				qtab$replicate <- 1#
			}#
			qid         <- unique(qtab[,c("K","replicate")])#
			### List of Q matrices (data frames) from the rectangular Qlog data frame#
			qlist        <- lapply(X=1:nrow(qid), FUN=function(x){resB=do.call(cbind,lapply(X=1:qid[x,"K"], FUN=function(z) { A=qtab[which(qtab[,"replicate"]==qid[x,"replicate"] & qtab[,"K"]==qid[x,"K"] ),]; A[A[,"cluster"]==z, "assignment"]})); colnames(resB)=paste0("Cluster",1:qid[x,"K"]); rownames(resB)=1:nrow(resB); resC <- as.data.frame(resB); resC})#
			names(qlist) <- sapply(X=1:nrow(qid),FUN=function(x) paste0("structure_K",qid[x,"K"],"r",qid[x,"replicate"],".log_f"))#
			samplenames  <- qtab[1:length(unique(qtab[,"individual"])),"individual"]#
			#### Need to set the following attributes for each data frame in qlist or else alignK function will fail.#
			# ind, k, loci, reps, elpd, mvll, vll # each is an integer except elpd and mvll, which are numeric floats#
			# This loop adds arbitrary values for required attributes, allowing us to use the alignK function for qmatrices programs other than STRUCTURE#
			for(i in 1:length(qlist)){#
				attr(qlist[[i]], 'ind')    <- nrow(qlist[[i]])#
				attr(qlist[[i]], 'k')      <- ncol(qlist[[i]])#
				attr(qlist[[i]], 'loci')   <- 5000#
				attr(qlist[[i]], 'burnin') <- 9999#
				attr(qlist[[i]], 'reps')   <- 99999#
				attr(qlist[[i]], 'elpd')   <- -99999.9#
				attr(qlist[[i]], 'mvll')   <- -99999.9#
				attr(qlist[[i]], 'vll')    <- 2000#
			}#
		} else {#
			stop("Q matrices must be supplied in either 'log_f' files produced by STRUCTURE (or 'run_structure' wrapper function) or 'Qlog' files like those produced by 'run_SNMF', 'run_fastStructure', or 'run_DAPC' functions")#
		}#
	}#
	numind     <- nrow(qlist[[1]])#
	if(!is.null(labels)){#
		samplenames <- labels#
	} else {#
		if(is.null(xdir)){#
			samplenames <- 1:numind#
		}#
	}#
	label.size <- min((288/numind),7)#
	# Set rownames of each matrix in qlist as the names of samples#
	qlist2 <- lapply(X=1:length(qlist), FUN=function(x) {A=qlist[[x]]; rownames(A)=samplenames; A})#
	# Aligned qlist#
	aqlist <- pophelper::alignK(qlist)#
	# List of aligned q matrices with rownames as samplenames#
	aqlist2   <- lapply(X=1:length(aqlist), FUN=function(x) {A=aqlist[[x]]; rownames(A)=samplenames; A})#
	aqlist2.K <- sapply(aqlist2, ncol)#
	kmax      <- max(aqlist2.K)#
	numruns   <- max(table(aqlist2.K))#
	### Just use the first run if userun are al greater than the number of runs#
	if(any(userun <= numruns)){#
		userun <- userun[userun %in% 1:numruns]#
	} else {#
		userun <- 1#
	}#
	#for(i in 1:unique(aqlist2.K)){#
	#	aqlist.i <- do.call(cbind,aqlist2[aqlist2.K == i])#
	#	margin()#
	#}#
	# List of aligned q matrices for first run of each K. Will edit this to use instead the mean across runs.#
	slist      <- aqlist2[match(1:kmax, sapply(aqlist2, ncol))]#
	slist.list <- list(); length(slist.list) <- numruns#
#	slist      <- qlist2[match(1:kmax,sapply(qlist2,ncol))+(userun-1)]#
	#slist2     <- list(); length(slist2) <- length(slist)#
	for(i in 1:numruns){#
		slist.list[[i]] <- aqlist2[match(1:kmax,sapply(aqlist2, ncol)) + (i-1)]#
	}#
	slist.list2 <- slist.list[userun]#
	if(length(slist.list2)>1){#
		### Average across runs#
		for(i in 1:kmax){#
			X    <- lapply(X=slist.list2, FUN=function(x){ c(t(x[[i]])) })#
			Y    <- do.call(rbind, X)#
			Z    <- colMeans(Y)#
			zmat <- matrix(Z,ncol=i,byrow=T)#
			rownames(zmat) <- samplenames#
			colnames(zmat) <- colnames(slist[[i]])#
			zdf            <- as.data.frame(zmat)#
			slist2[[i]]    <- zdf#
			#Y <- array(Y, dim=c(dim(X[[1]]), length(X)))#
			#apply(X=Y, MARGIN=c(1, 2), FUN=mean, na.rm = TRUE)#
		}#
	} else {#
		slist2    <- slist.list2[[1]]#
	}#
	Krange      <- 1:kmax#
	Krange.plot <- 2:kmax#
	# empty list to hold admixture plots#
	admixturePlot <- list(); length(admixturePlot)   <- length(Krange.plot)#
	for(K in 2:kmax){#
		i=(K-1)#
		if(K <= 15){#
			myCols          <- goodcolors2(n=15)[1:K]#
		}#
		if(K>15){#
			myCols          <- c(goodcolors2(n=15), sample(adegenet::funky(100), size=K-15))#
		}#
		q.matrix  <- slist2[[K]]#
		#q.matrix  <- slist[[K]]#
		# test <- ape::ladderize(phangorn::NJ(dist(q.matrix)))#
		### Attempt to reorder individuals in the barplot by their population assignment proportions.#
		indv.pop           <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))[1]})#
		posterior.df       <- data.frame(indv=rep(rownames(q.matrix),ncol(q.matrix)), pop=rep(colnames(q.matrix),each=nrow(q.matrix)), assignment=c(unlist(unname(q.matrix))))#
		posterior.df$indv  <- factor(posterior.df$indv, levels = names(sort(indv.pop)))#
		#if(debug) message(cat("\r",paste0("K=",K," step 7.3")))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Admixture Proportion",y="",fill="Cluster",title=paste0("K = ",K)) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
	}#
	if(save){#
		pdf(height=6,width=10,file=save.as,onefile=TRUE)#
			lapply(X=admixturePlot, FUN=print)#
		dev.off()#
	}#
	admixturePlot#
}
leporinum.barplots.dapc  <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/")
leporinum.barplots.dapc[[1]]
statlog  <- read.table("/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/fastStructure/empirical/Oxyrhabdium-leporinum_BestSNP/Oxyrhabdium-leporinum_BestSNP_fastStructure.margLlog", header=T)
statlog[,1:10]
statlog[1:10,]
statlog  <- read.table("/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/Oxyrhabdium-leporinum_DAPC.BIClog", header=T)
statlog[1:10,]
statname <- "BIC"
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
bestK
leporinum.barplots.dapc.K10 <- leporinum.barplots.dapc[[(bestK-1)]]
leporinum.barplots.dapc.K10
leporinum.dapc.gtab <- admixtureGrob(leporinum.barplots.dapc.K10,lev=indv.order,barplot.title="DAPC K=10")
figure.gtab  <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,barplot.gtab,leporinum.lea.gtab,leporinum.fs.gtab,leporinum.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(figure.gtab)
bp.test      <- leporinum.barplots.dapc.K10#
test.df      <- bp.test$data#
test.df$indv <- factor(test.df$indv, levels=indv.order)#
bp.test$data <- test.df#
test.slim.gg <- bp.test + theme(axis.text.x=element_blank(),axis.text.y=element_blank(),axis.ticks.x=element_blank(),axis.ticks.y=element_blank(),legend.position = "none",title=element_blank(),axis.line=element_blank())
test2 <- admixtureGrob(x=leporinum.barplots.fs.K8,lev=indv.order,barplot.title="test",style.gg=test.slim.gg)
plot(test2)
test1 <- admixtureGrob(x=leporinum.barplots.fs.K8,lev=indv.order,barplot.title="test")#
test2 <- admixtureGrob(x=leporinum.barplots.fs.K8,lev=indv.order,barplot.title="test",style.gg=test.slim.gg)
plot(gridExtra::arrangeGrob(grobs=list(test1,test2),layout_matrix=matrix(c(1,2),nrow=1),respect=FALSE))
plot(figure.gtab)
plot(gridExtra::arrangeGrob(grobs=list(test1,test2),layout_matrix=matrix(c(1,2),nrow=1),respect=FALSE))
test1 <- admixtureGrob(x=leporinum.barplots.lea.K3,lev=indv.order,barplot.title="test")#
test2 <- admixtureGrob(x=leporinum.barplots.lea.K3,lev=indv.order,barplot.title="test",style.gg=test.slim.gg)#
plot(gridExtra::arrangeGrob(grobs=list(test1,test2),layout_matrix=matrix(c(1,2),nrow=1),respect=FALSE))
plot(figure.gtab)
tree  <- ape::read.tree(file="/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Calamaria-gervaisii_AllPops_AllSNPs_Partitioned.tre")
tree2 <- tree
tree3 <- root(tree2,outgroup=tree2$tip.label[grep("KU326403",tree2$tip.label)])
tree3.gg <- ggtre::ggtree(tree3)
tree3.gg <- ggtree::ggtree(tree3)
tree3.df <- as.data.frame(tree3.gg$data)
indv.order <- tree3.df[order(tree3.df[tree3.df[,"isTip"],"y"]),"label"]
Calamaria.barplots.lea    <- admixturePlots(xdir="/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/LEA/empirical/Calamaria-gervaisii_AllPops_BestSNP")
statlog  <- read.table("/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/LEA/empirical/Calamaria-gervaisii_AllPops_BestSNP/result_snmf.entropyLog", header=T)
kmax     <- max(statlog[,"K"])#
statname <- "crossentropy"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
bestK
Calamaria.barplots.lea.K2 <- Calamaria.barplots.lea[[bestK-1]]
Calamaria.barplots.lea.K2
Calamaria.lea.gtab <- admixtureGrob(Calamaria.barplots.lea.K2,lev=indv.order,barplot.title="LEA K=2")
xdir <- "/Users/alyssaleinweber/Documents/Chapter3_Oxyrhabdium/DAPC/Oxyrhabdium-leporinum_BestSNP/"#
Calamaria.barplots.dapc  <- admixturePlots(xdir=xdir)
statlog  <- read.table(list.files(xdir,pattern=".BIClog$",full.names=T))
statname <- "BIC"
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})
colnames(statlog)
statlog  <- read.table(list.files(xdir,pattern=".BIClog$",full.names=T),header=T)
statname <- "BIC"
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
bestK
Calamaria.barplots.dapc.bestK <- Calamaria.barplots.dapc[[(bestK-1)]]
Calamaria.dapc.gtab <- admixtureGrob(Calamaria.barplots.dapc.bestK,lev=indv.order,barplot.title="DAPC K=8")
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/DAPC/empirical/Calamaria-gervaisii_AllPops_BestSNP"#
Calamaria.barplots.dapc  <- admixturePlots(xdir=xdir)
statlog  <- read.table(list.files(xdir,pattern=".BIClog$",full.names=T),header=T)#
statname <- "BIC"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
Calamaria.barplots.dapc.bestK <- Calamaria.barplots.dapc[[(bestK-1)]]
bestK
Calamaria.dapc.gtab <- admixtureGrob(Calamaria.barplots.dapc.bestK,lev=indv.order,barplot.title=paste0("DAPC K=",bestK))
Calamaria.dapc.gtab
plot(Calamaria.dapc.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/fastStructure/empirical/Calamaria-gervaisii_AllPops_BestSNP"#
Calamaria.barplots.fs  <- admixturePlots(xdir=xdir)#
statlog  <- read.table(list.files(xdir,pattern=".margLlog$",full.names=T),header=T)
kmax     <- max(statlog[,"K"])#
statname <- "MarginalLikelihood"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==max(kstat.df[,"mean.stat"])),"K"]
Calamaria.barplots.fs.bestK <- Calamaria.barplots.dapc[[(bestK-1)]]#
Calamaria.fs.gtab <- admixtureGrob(Calamaria.barplots.fs.bestK,lev=indv.order,barplot.title=paste0("fastStructure K=",bestK))
bestK
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/STRUCTURE/structure_Calamaria-gervaisii"#
Calamaria.barplots.structure  <- admixturePlots(xdir=xdir)
qfiles  <- list.files(xdir, full.names=T, pattern="log_f$")
qlist       <- pophelper::readQ(files=qfiles)#
tr1         <- pophelper::tabulateQ(qlist)#
sr1         <- pophelper::summariseQ(tr1)
evStr.df    <- suppressWarnings(pophelper::evannoMethodStructure(sr1))
bestK[[i]]	<- evStr.df[which(evStr.df[,statname]==max(evStr.df[,statname],na.rm=T))[1],"k"]
statname
statname    <- "deltaK"
bestK	<- evStr.df[which(evStr.df[,statname]==max(evStr.df[,statname],na.rm=T))[1],"k"]
bestK
Calamaria.barplots.structure.bestK <- Calamaria.barplots.structure[[(bestK-1)]]#
Calamaria.structure.gtab <- admixtureGrob(Calamaria.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("fastStructure K=",bestK))
tree3.grob <- ggplotGrob(tree3.gg)#
tree3.gtab  <- gridExtra::arrangeGrob(tree3.grob,top="Calamaria gervaisii IQTREE partitioned")
Calamaria.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)#
plot(Calamaria.figure.gtab)
Calamaria.barplots.structure
Calamaria.barplots.structure.bestK
plot(Calamaria.figure.gtab)
test  <- admixturePlots(xdir=xdir,20)
test  <- admixturePlots(xdir=xdir,1:20)
plot(test[[2]])
plot(Calamaria.figure.gtab)
tree  <- ape::read.tree("/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Ahaetulla-prasina_AllPops_AllSNPs_Partitioned.tre")
tree2 <- tree
tree3 <- root(tree2,outgroup=tree2$tip.label[grep("KU337135",tree2$tip.label)])#
tree3.gg <- ggtree::ggtree(tree3)#
tree3.df <- as.data.frame(tree3.gg$data)
indv.order <- tree3.df[order(tree3.df[tree3.df[,"isTip"],"y"]),"label"]
Calamaria.tree.gtab  <-
Calamaria.tree.gtab  <- tree3.gtab
tree3.grob <- ggplotGrob(tree3.gg)
Ahaetulla.tree.gtab  <- gridExtra::arrangeGrob(tree3.grob,top="Ahaetulla prasina IQTREE partitioned")
plot(Ahaetulla.tree.gtab)
tree   <- ape::read.tree("/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Ahaetulla-prasina_AllPops_AllSNPs_Partitioned.tre")#
#tree2 <- ape::drop.tip(tree,setdiff(tree$tip.label, barplot.df$indv))#
tree2 <- tree#
# root the tree; this step cant be automated entirely#
tree3 <- ladderize(root(tree2,outgroup=tree2$tip.label[grep("KU337135",tree2$tip.label)]))#
tree3.gg <- ggtree::ggtree(tree3)#
tree3.df <- as.data.frame(tree3.gg$data)#
## character vector of tip labels in the order they are plotted from bottom to top of the graphical window#
indv.order <- tree3.df[order(tree3.df[tree3.df[,"isTip"],"y"]),"label"]#
tree3.grob <- ggplotGrob(tree3.gg)#
Ahaetulla.tree.gtab  <- gridExtra::arrangeGrob(tree3.grob,top="Ahaetulla prasina IQTREE partitioned")
plot(Ahaetulla.tree.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/LEA/empirical/Ahaetulla-prasina_AllPops_BestSNP"#
Ahaetulla.barplots.lea    <- admixturePlots(xdir=xdir)#
statlog  <- read.table(list.files(xdir,pattern=".entropyLog$",full.names=T),header=T)
kmax     <- max(statlog[,"K"])#
statname <- "crossentropy"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
Ahaetulla.barplots.lea.bestK <- Ahaetulla.barplots.lea[[bestK-1]]#
Ahaetulla.lea.gtab <- admixtureGrob(Ahaetulla.barplots.lea.bestK,lev=indv.order,barplot.title=paste0("LEA K=",bestK))
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]
bestK
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/DAPC/empirical/Ahaetulla-prasina_AllPops_BestSNP"#
Ahaetulla.barplots.dapc  <- admixturePlots(xdir=xdir)#
statlog  <- read.table(list.files(xdir,pattern=".BIClog$",full.names=T),header=T)#
statname <- "BIC"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]#
Ahaetulla.barplots.dapc.bestK <- Ahaetulla.barplots.dapc[[(bestK-1)]]#
Ahaetulla.dapc.gtab <- admixtureGrob(Ahaetulla.barplots.dapc.bestK,lev=indv.order,barplot.title=paste0("DAPC K=",bestK))
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/fastStructure/empirical/Ahaetulla-prasina_AllPops_BestSNP"#
Ahaetulla.barplots.fs  <- admixturePlots(xdir=xdir)#
statlog  <- read.table(list.files(xdir,pattern=".margLlog$",full.names=T),header=T)#
kmax     <- max(statlog[,"K"])#
statname <- "MarginalLikelihood"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)#
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==max(kstat.df[,"mean.stat"])),"K"]#
Ahaetulla.barplots.fs.bestK <- Ahaetulla.barplots.dapc[[(bestK-1)]]#
Ahaetulla.fs.gtab <- admixtureGrob(Ahaetulla.barplots.fs.bestK,lev=indv.order,barplot.title=paste0("fastStructure K=",bestK))
plot(Ahaetulla.fs.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/STRUCTURE/structure_Ahaetulla-prasina_AllPops"#
#
Ahaetulla.barplots.structure  <- admixturePlots(xdir=xdir)
statname    <- "deltaK"#
qfiles      <- list.files(xdir, full.names=T, pattern="log_f$")#
qlist       <- pophelper::readQ(files=qfiles)
tr1         <- pophelper::tabulateQ(qlist)#
sr1         <- pophelper::summariseQ(tr1)#
evStr.df    <- suppressWarnings(pophelper::evannoMethodStructure(sr1))
bestK       <- evStr.df[which(evStr.df[,statname]==max(evStr.df[,statname],na.rm=T))[1],"k"]#
Ahaetulla.barplots.structure.bestK <- Ahaetulla.barplots.structure[[(bestK-1)]]
Ahaetulla.structure.gtab <- admixtureGrob(Ahaetulla.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("fastStructure K=",bestK))
plot(Ahaetulla.structure.gtab)
Ahaetulla.structure.gtab <- admixtureGrob(Ahaetulla.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("STRUCTURE K=",bestK))
Calamaria.structure.gtab <- admixtureGrob(Calamaria.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("STRUCTURE K=",bestK))
plot(Calamaria.figure.gtab)
bestK=1
Ahaetulla.lea.gtab <- admixtureGrob(grid::rectGrob(gp=grid::gpar(col=NA)),top=paste0("LEA K=",bestK))
Ahaetulla.lea.gtab <- gridExtra::arrangeGrob(grid::rectGrob(gp=grid::gpar(col=NA)),top=paste0("LEA K=",bestK))
Ahaetulla.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)#
plot(Ahaetulla.figure.gtab)
plot(Calamaria.figure.gtab)
Calamaria.structure.gtab <- admixtureGrob(Calamaria.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("STRUCTURE K=",bestK))
Calamaria.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(Calamaria.figure.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/STRUCTURE/structure_Calamaria-gervaisii"
statname    <- "deltaK"#
qfiles      <- list.files(xdir, full.names=T, pattern="log_f$")#
qlist       <- pophelper::readQ(files=qfiles)#
tr1         <- pophelper::tabulateQ(qlist)
sr1         <- pophelper::summariseQ(tr1)#
evStr.df    <- suppressWarnings(pophelper::evannoMethodStructure(sr1))#
bestK       <- evStr.df[which(evStr.df[,statname]==max(evStr.df[,statname],na.rm=T))[1],"k"]
Calamaria.barplots.structure.bestK <- Calamaria.barplots.structure[[(bestK-1)]]#
Calamaria.structure.gtab <- admixtureGrob(Calamaria.barplots.structure.bestK,lev=indv.order,barplot.title=paste0("STRUCTURE K=",bestK))
Calamaria.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(tree3.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(Calamaria.figure.gtab)
Calamaria.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(Calamaria.tree.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(Calamaria.figure.gtab)
plot(Calamaria.structure.gtab)
plot(Calamaria.barplots.structure.bestK)
indv.order
Calamaria.tree  <- ape::read.tree(file="/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Calamaria-gervaisii_AllPops_AllSNPs_Partitioned.tre")#
#tree2 <- ape::drop.tip(tree,setdiff(tree$tip.label, barplot.df$indv))#
Calamaria.tree2 <- tree#
# root the tree; this step cant be automated entirely#
Calamaria.tree3 <- ladderize(root(Calamaria.tree2,outgroup=Calamaria.tree2$tip.label[grep("KU326403",Calamaria.tree2$tip.label)]))
Calamaria.tree  <- ape::read.tree(file="/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Calamaria-gervaisii_AllPops_AllSNPs_Partitioned.tre")#
#tree2 <- ape::drop.tip(tree,setdiff(tree$tip.label, barplot.df$indv))#
Calamaria.tree2 <- Calamaria.tree#
# root the tree; this step cant be automated entirely#
Calamaria.tree3 <- ladderize(root(Calamaria.tree2,outgroup=Calamaria.tree2$tip.label[grep("KU326403",Calamaria.tree2$tip.label)]))
Calamaria.tree3.gg <- ggtree::ggtree(Calamaria.tree3)#
Calamaria.tree3.df <- as.data.frame(Calamaria.tree3.gg$data)
Calamaria.indv.order <- Calamaria.tree3.df[order(Calamaria.tree3.df[Calamaria.tree3.df[,"isTip"],"y"]),"label"]
Calamaria.tree3.grob <- ggplotGrob(Calamaria.tree3.gg)#
Calamaria.tree.gtab  <- gridExtra::arrangeGrob(Calamaria.tree3.grob,top="Calamaria gervaisii IQTREE partitioned")
Calamaria.structure.gtab <- admixtureGrob(Calamaria.barplots.structure.bestK,lev=Calamaria.indv.order,barplot.title=paste0("STRUCTURE K=",bestK))
Calamaria.structure.gtab
plot(Calamaria.structure.gtab)
Calamaria.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(Calamaria.tree.gtab,Calamaria.structure.gtab,Calamaria.lea.gtab,Calamaria.fs.gtab,Calamaria.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(Calamaria.figure.gtab)
Ahaetulla.tree   <- ape::read.tree("/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/IQTREE/Ahaetulla-prasina_AllPops_AllSNPs_Partitioned.tre")#
#tree2 <- ape::drop.tip(tree,setdiff(tree$tip.label, barplot.df$indv))#
Ahaetulla.tree2 <- Ahaetulla.tree#
# root the tree; this step cant be automated entirely#
Ahaetulla.tree3 <- ladderize(root(Ahaetulla.tree2,outgroup=Ahaetulla.tree2$tip.label[grep("KU337135",Ahaetulla.tree2$tip.label)]))
Ahaetulla.tree3.gg <- ggtree::ggtree(Ahaetulla.tree3)#
Ahaetulla.tree3.df <- as.data.frame(Ahaetulla.tree3.gg$data)#
## character vector of tip labels in the order they are plotted from bottom to top of the graphical window#
Ahaetulla.indv.order <- Ahaetulla.tree3.df[order(Ahaetulla.tree3.df[Ahaetulla.tree3.df[,"isTip"],"y"]),"label"]#
Ahaetulla.tree3.grob <- ggplotGrob(Ahaetulla.tree3.gg)
Ahaetulla.tree.gtab  <- gridExtra::arrangeGrob(Ahaetulla.tree3.grob,top="Ahaetulla prasina IQTREE partitioned")
plot(Ahaetulla.tree.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/LEA/empirical/Ahaetulla-prasina_AllPops_BestSNP"
statlog  <- read.table(list.files(xdir,pattern=".entropyLog$",full.names=T),header=T)#
kmax     <- max(statlog[,"K"])#
statname <- "crossentropy"#
kstat    <- sapply(X=1:kmax, FUN=function(x) {mean(statlog[which(statlog[,"K"]==x), statname])})#
kstat.df <- data.frame(K=1:kmax, mean.stat=kstat)
bestK    <- kstat.df[which(kstat.df[,"mean.stat"]==min(kstat.df[,"mean.stat"])),"K"]#
if(bestK==1){#
	Ahaetulla.lea.gtab <- gridExtra::arrangeGrob(grid::rectGrob(gp=grid::gpar(col=NA)),top=paste0("LEA K=",bestK))#
} else {#
	Ahaetulla.barplots.lea.bestK <- Ahaetulla.barplots.lea[[bestK-1]]#
	Ahaetulla.lea.gtab <- admixtureGrob(Ahaetulla.barplots.lea.bestK,lev=Ahaetulla.indv.order,barplot.title=paste0("LEA K=",bestK))#
}
Ahaetulla.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(Ahaetulla.tree3.gtab,Ahaetulla.structure.gtab,Ahaetulla.lea.gtab,Ahaetulla.fs.gtab,Ahaetulla.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
Ahaetulla.figure.gtab  <- gridExtra::arrangeGrob(grobs=list(Ahaetulla.tree.gtab,Ahaetulla.structure.gtab,Ahaetulla.lea.gtab,Ahaetulla.fs.gtab,Ahaetulla.dapc.gtab),layout_matrix=matrix(c(1,1,1,2,3,4,5),nrow=1),respect=FALSE)
plot(Ahaetulla.figure.gtab)
xdir <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/LEA/empirical/Ahaetulla-prasina_AllPops_BestSNP"
statlog  <- read.table(list.files(xdir,pattern=".entropyLog$",full.names=T),header=T)
dim(statlog)
statlog[1:10,]
qfiles         <- c(list.files(xdir, full.names=T, pattern="log_f$"), list.files(xdir, full.names=T, pattern="Qlog$"))
qtab <- read.table(qfiles, header=T,sep="\t")
dim(qtab)
qtab[1:10,]
dev.off()
dev.off()
