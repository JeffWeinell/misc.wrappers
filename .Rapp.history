i2[[1]]
i2[[2]]
i2[[3]]
i2f     <- unique(do.call(rbind,lapply(i2,c)))
dim(i2f)
head(i2f)
u1    <- apply(pairsMat0, 1, function(x){unionMat(p1[[x[1]]],p1[[x[2]]])}, simplify=F)
u1test1 <- sapply(u1,transitive)#
	u1test2 <- sapply(u1,symmetric)#
	u1test3 <- sapply(u1,reflexive)
length(which(i1test1))
length(which(u1test1))
length(which(u1test2))
length(which(u1test3))
u2      <- u1[u1test1 & u1test2 & u1test3]
length(u2)
u2[[1]]
u2f     <- unique(do.call(rbind,lapply(u2,c)))
u2f[[1]]
dim(u2f)
head(u2f)
?bell
nrow(u2f)==VGAML::bell(mp)
bell(4)
?bell
nrow(u2f)==VGAM::bell(mp)
p[[15]]
p1[[15]]
p1[[15]] %*% p1[[15]]
PM2 <- permutations(v=1:mp,r=2)
PM2 <- permutations(n=mp,v=1:mp,r=2)
PM2
sort(PM2)
PM2 <- apply(permutations(n=mp,v=1:mp,r=2),1,sort)
PM2
PM2 <- unique(t(apply(permutations(n=mp,v=1:mp,r=2),1,sort)))
PM2
PM2 <- permutations(n=mp,v=1:mp,r=2) %>% [,1] < [,2]
PM2 <- permutations(n=mp,v=1:mp,r=2) %>% .[,1] < .[,2]
library(dplyr)
PM2 <- permutations(n=mp,v=1:mp,r=2) %>% .[,1] < .[,2]
PM2 <- permutations(n=mp,v=1:mp,r=2) %>% .[,1] < 1
PM2
PM2 <- permutations(n=mp,v=1:mp,r=2) %>% .[,1]
PM2
M2 <- permutations(n=mp,v=1:mp,r=2) %>% mutate(Resp_final = if_else(1 < 2, T, F))
M2 <- permutations(n=mp,v=1:mp,r=2) %>% mutate(Resp_final = if_else($1 < $2, T, F))
M2 <- permutations(n=mp,v=1:mp,r=2) %>% mutate(Resp_final = if_else(.[,1] < [,2], T, F))
?mutate
? permutations
data.frame(gtools::permutations(n=mp,r=mp)) %>% mutate(Resp_final = if_else(V1 < V2, T, F))
data.frame(gtools::permutations(n=mp,r=mp))
data.frame(gtools::permutations(n=mp,v=1:mp,r=2))
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F))
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, X1, X2))
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) >%> filter(Resp_final)
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) >%> filter(Resp_final==TRUE)
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) %>% filter(Resp_final==TRUE)
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) %>% filter(Resp_final)
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) %>% filter(Resp_final) %>% select(X1,X2)
data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) %>% filter(Resp_final) %>% select(X1,X2) %>% as.matrix
devtools::document()
test2 <- equivalencyMats(2)
test2
test3 <- equivalencyMats(3)
dim(test3)
length(test3)
test3
test4 <- equivalencyMats(4)
length(test4)
test5 <- equivalencyMats(5); length(test5)
test5[10:20]
test6 <- equivalencyMats(6); length(test6)
bell(6)
test6[[1]]
test6[[2]]
test6[[3]]
counts <- lapply(test6,table)
counts[[1]]
counts[[2]]
counts[[3]]
counts <- lapply(test6,table) %>% melt
counts <- lapply(test6,table) %>% do.call(rbind)
counts <- lapply(test6,table) %>% do.call(rbind,.)
dim(counts)
head(counts)
counts <- lapply(test6,table) %>% do.call(rbind,.) %>% select(1==7)
counts <- lapply(test6,table) %>% do.call(rbind,.) %>% select('1'==7)
counts <- lapply(test6,table) %>% do.call(rbind,.) %>% class
lapply(test6,table) %>% do.call(rbind,.) %>% class
lapply(test6,table) %>% do.call(rbind,.) %>% as.data.frame %>% select(1==7)
lapply(test6,table) %>% do.call(rbind,.) %>% as.data.frame %>% head
lapply(test6,table) %>% do.call(rbind,.) %>% as.data.frame %>% select($1==7)
lapply(test6,table) %>% do.call(rbind,.) %>% as.data.frame %>% select('1'==7)
lapply(test6,table) %>% do.call(rbind,.) %>% as.data.frame %>% filter(1==7)
mp
mp=6
ZML <- lapply(1:mp,function(x){m=diag(mp); m[1:x,1:x] <- 1; m})#
	## For each matrix in ZML, reorder rows and columns on the permutation set of 1:mp.#
	PM <- gtools::permutations(n=mp,r=mp)#
	# PM <- PM[PM[,1]<PM[,2]]#
	# generates all possible reorderings of rows; each row reorder occurs with an identical column reorder.#
	## PM2 <- data.frame(gtools::permutations(n=mp,v=1:mp,r=2)) %>% mutate(Resp_final = if_else(X1 < X2, T, F)) %>% filter(Resp_final) %>% select(X1,X2) %>% as.matrix#
#
	LML <- list()#
	## obtain the list of equivalence relations matrices
for (i in 1:length(ZML)){#
		ZMLi  <- lapply(1:nrow(PM),function(x){ZML[[i]][PM[x,],PM[x,]]})#
		LMLi  <- unique(do.call(rbind,lapply(ZMLi,c)))#
		#LML  <- rbind(LML,LMLi)#
		LML   <- c(LML,list(LMLi))#
	}#
	LMLf        <- do.call(rbind,LML)#
	p1   <- apply(LMLf,1,function(x){matrix(x,nrow=mp,ncol=mp)},simplify=F)
dim(p1)
numSchemes1 <- length(p1)#
	pairsMat0   <- as.matrix(expand.grid(c(1:numSchemes1),c(1:numSchemes1)))
dim(pairsMat0)
length(p1)
length(unique(p1))
p1[[1]]
p1[[2]]
u1    <- apply(pairsMat0, 1, function(x){unionMat(p1[[x[1]]],p1[[x[2]]])}, simplify=F)
dim(1)
length(u1)
dim(u1)
u1[[1]]
transitive(u1[[1]])
u1test2 <- sapply(u1,symmetric)#
	u1test3 <- sapply(u1,reflexive)#
	u2      <- u1[u1test1 & u1test2 & u1test3]#
	u2f     <- unique(do.call(rbind,lapply(u2,c)))
u2
u1    <- apply(pairsMat0, 1, function(x){unionMat(p1[[x[1]]],p1[[x[2]]])}, simplify=F)#
	# All expected partitions generated in the set of pairwise union sets; this is probably the fastest method.#
	u1test1 <- sapply(u1,transitive)#
	u1test2 <- sapply(u1,symmetric)#
	u1test3 <- sapply(u1,reflexive)#
	u2      <- u1[u1test1 & u1test2 & u1test3]#
	u2f     <- unique(do.call(rbind,lapply(u2,c)))
dim(u2f)
nrow(u2f)==VGAM::bell(mp)
VGAM::bell(mp)
nrow(u2f)
i1    <- apply(pairsMat0, 1, function(x){intMat(p1[[x[1]]],p1[[x[2]]])}, simplify=F)
i1test1 <- sapply(i1,transitive)#
		i1test2 <- sapply(i1,symmetric)#
		i1test3 <- sapply(i1,reflexive)#
		i2      <- i1[i1test1 & i1test2 & i1test3]#
		i2f     <- unique(do.call(rbind,lapply(i2,c)))
dim(i2f)
u2f[[1]]
u1[[1]]
u1[[1]] %*% u1[[1]]
c1    <- apply(pairsMat0, 1, function(x){clipMat(p1[[x[1]]],p1[[x[2]]])}, simplify=F)
c1[[1]]
c1[[2]]
c1test1 <- sapply(c1,transitive)#
		c1test2 <- sapply(c1,symmetric)#
		c1test3 <- sapply(c1,reflexive)#
		c2      <- c1[c1test1 & c1test2 & c1test3]#
		c2f     <- unique(do.call(rbind,lapply(c2,c)))
dim(c2f)
188+27
dim(LMLf)
unique(dim(LMLf))
dim(unique(rbind(LMLf,u2f)))
dim(unique(rbind(LMLf,u2f,i1f)))
dim(unique(rbind(LMLf,u2f,i2f)))
dim(unique(rbind(LMLf,u2f,i2f,c2f)))
dim(pr2r)
dim(unique(rbind(LMLf,u2f,i2f,c2f,pr2r)))
pr0    <- apply(pm[pm[,1]<pm[,2],], 1, function(x){(p1[[x[1]]] %*% p1[[x[2]]])}, simplify=F)
pr0    <- apply(pairsMat0[pairsMat0[,1]<pairsMat0[,2],], 1, function(x){(p1[[x[1]]] %*% p1[[x[2]]])}, simplify=F)
length(pr0)
pr0r   <- unique(do.call(rbind,lapply(pr0[sapply(pr0,function(x){transitive(x) & symmetric(x) & reflexive(x)})],c)))
dim(pr0r)
length(p1)
devtools::document()
test6 <- equivalencyMats(6)
dim(pr2r)
dim(s2r)
class(s2r)
devtools::document()
test6 <- equivalencyMats(6)
class(test6)
length(test6)
max(unlist(test6))
max(unlist(pr1))
pr1max <- which(sapply(pr1,max))
pr1max <- sapply(pr1,max)
length(pr1max)
pr1max[1]
pr1max[2]
pr1max[3]
which(pr1max)==5
length(which(pr1max==5))
class(pr1)
pr1[[which(pr1max==5)]]
pr1[which(pr1max==5)]
A=pr1[which(pr1max==5)][[5]]
A
A %*% diag(mp)
diag(mp)
diag(mp) %*% A
diag(mp) %*% mat(1,nrow=1,ncol=6)
diag(mp) %*% matrix(1,nrow=1,ncol=6)
matrix(1,nrow=1,ncol=6)
diag(mp) %*% matrix(1,nrow=6,ncol=1)
diag(mp) %*% matrix(c(1,0,0,0,0,0),ncol=1)
reassign(A)
A*T
A/A
A
pr1[[10]]
B=pr1[[10]]
B
B/B
(B/B)*T
B%*%B
B
B^2
B
A^2
A*B
C=A*B
C
C/C
C/5
CC
C
C
C%*%C
C
C*1
C>0
(C>0)*1
length(pr1)
dim(pr1)
pr1f    <- lapply(pr1,function(x){(x>0)*1})
pr1f[[1]]
pr1f[[500]]
pr1f[[1000]]
pr2     <- pr1f[sapply(pr1f,function(x){transitive(x) & symmetric(x) & reflexive(x)})]
length(pr2)
pr2f    <- unique(do.call(rbind,lapply(pr2,c)))
dim(pr2f)
s2fpr2f <- unique(rbind(s2f,pr2f))
dim(s2fpr2f)
devtools::document()
equivalencyMats(1)
equivalencyMats(2)
equivalencyMats(3)
length(equivalencyMats(4))
length(equivalencyMats(5))
length(equivalencyMats(6))
length(equivalencyMats(7))
length(equivalencyMats(8))
# 4140
bell(8)
bell(7)
bell(9)
C
C %*% C
D = C %*% C
D / max(D)
C %*% C
C %*% C %>% max
D == max(D)
(D == max(D)) * 1
C %*% C %*% C
C %*% C %*% C %*% C
C
length(test6)
test[[50]]
test6[[50]]
test5[[50]]
test5[[50]] %*% test5[[50]]
test5[[40]] %*% test5[[40]]
test5[[35]] %*% test5[[35]]
sum(test5[[35]] %*% test5[[35]])
sum(test5[[40]] %*% test5[[40]])
sum(diag(test5[[40]] %*% test5[[40]]))
sum(diag(test5[[35]] %*% test5[[35]]))
devtools::document()
