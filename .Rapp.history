lengths(da.densityPlot[[8]])
lengths(da.densityPlot[[9]])
sapply(da.densityPlot,lengths)
sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})
da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})
da.dens.plotsPerK
da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]
da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of discriminant function vs. K"), NULL))
plot(da.density.arranged)
pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})
pca.dens.plotsPerK
pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of principle component vs. K"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(pca.density.arranged)
dim(pca.density.arranged)
devtools::document()
da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of discriminant function vs. K"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of principle component vs. K"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(da.density.arranged)
plot(pca.density.arranged)
plot(pca.density.arranged)
if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Retained principle components (density)  vs. K"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(pca.density.arranged)
da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of discriminant functions vs. K; colors indicate population clusters"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of retained principle components vs. K; colors indicate population clusters"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(pca.density.arranged)
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}
plot(da.biplot.arranged[[1]])
length(da.biplot.arranged)
da.biplot.arranged[[8]]
plot(da.biplot.arranged[[8]])
empty.set <- list(); length(empty.set) <- max.clusters-1#
	dapc.pcabest.list <- admixturePlot <- da.densityPlot <- da.biPlot <- pca.densityPlot <- pca.biPlot <- da.psets <- da.layout.mat<- pca.psets <- pca.layout.mat <- assignmentPlot <- posterior.list <- mapplot <- q.df <- dapc.df <- empty.set#
	message("step 3")#
	density.stop<-FALSE#
	for(K in 2:max.clusters){#
		print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste(K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste(K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste(K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K#
	message("step 4")
devtools::document()
devtools::document()
empty.set <- list(); length(empty.set) <- max.clusters-1#
	dapc.pcabest.list <- admixturePlot <- da.densityPlot <- da.biPlot <- pca.densityPlot <- pca.biPlot <- da.psets <- da.layout.mat<- pca.psets <- pca.layout.mat <- assignmentPlot <- posterior.list <- mapplot <- q.df <- dapc.df <- empty.set#
	message("step 3")#
	density.stop<-FALSE#
	for(K in 2:max.clusters){#
		print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		if(!(minsize.grp < 4)){#
			ellipse.size <- 0#
		} else {#
			ellipse.size <- 1.5#
		}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cellipse=ellipse.size,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=ellipse.size,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste(K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste(K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste(K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}
message("step 4")#
	da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of discriminant functions vs. K; colors indicate population clusters"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("Density of retained principle components vs. K; colors indicate population clusters"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(da.density.arranged)
plot(pca.density.arranged)
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	message("step 7")#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biplot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biplot.arranged <- NULL#
	}#
	message("step 8")#
	dapc.componentPlots <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
any(lengths(da.biPlot)>0)
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}
plot(da.biplot.arranged[[1]])
for(K in 2:max.clusters){#
		print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		#if(!(minsize.grp < 4)){#
		#	ellipse.size <- 0#
		#} else {#
		#	ellipse.size <- 1.5#
		#}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste(K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste(K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste(K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K
da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each discriminant function for each population cluster"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each retained principle component for each population cluster"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	message("step 7")#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biplot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biplot.arranged <- NULL#
	}#
	message("step 8")#
	dapc.componentPlots <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
any(lengths(da.biPlot)>0)
rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
+ 		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
+ 		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
+
rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)
rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]
rangeK.da
n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)
n.da
names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})
names.bottom.da
names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})
names.left.da
da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})
rangeK.da
z=2;dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))
z=2;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))
plot(test)
z=3;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL)); plot(test)
4
z=4;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL)); plot(test)
z=5;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL)); plot(test)
z=6;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL)); plot(test)
z=7;test <- dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL)); plot(test)
dapc.biplot.arrange
x=da.biPlot;K=7,layout.mat=da.layout.mat[[7-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==7)]];row.labels.left=names.left.da[[which(rangeK.da==7)]];outer.text=list(NULL,NULL,paste0("K=",7,"; Biplots of discriminant functions"),NULL))
x=da.biPlot;K=7,layout.mat=da.layout.mat[[7-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==7)]];row.labels.left=names.left.da[[which(rangeK.da==7)]]; #outer.text=list(NULL,NULL,paste0("K=",7,"; Biplots of discriminant functions"),NULL))
x=da.biPlot;K=7;layout.mat=da.layout.mat[[7-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==7)]];row.labels.left=names.left.da[[which(rangeK.da==7)]]; outer.text=list(NULL,NULL,paste0("K=",7,"; Biplots of discriminant functions"),NULL))
x=da.biPlot;K=7;layout.mat=da.layout.mat[[7-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==7)]];row.labels.left=names.left.da[[which(rangeK.da==7)]]; outer.text=list(NULL,NULL,paste0("K=",7,"; Biplots of discriminant functions"),NULL)
col.labels.top=NULL;row.labels.right=NULL
pad
pad=0.1
maxMat
maxMat=c(7,7)
layout.mat
if(length(outer.text)!=4 | !is(outer.text,"list")){#
		outer.text <- rep(list(NULL),4)#
		warning("'outer.text' ignored because not a list or length(outer.text)!=4.")#
	}#
	if(is.null(K)){#
		gg.list  <- do.call(c, x)#
	} else {#
		gg.list  <- do.call(c, x[K-1])#
	}#
	gg.list2 <- gg.list[which(lengths(gg.list)!=0)]#
	## convert a list of lists of ggplots into a list of ggplots#
	grobs.list <- suppressWarnings(lapply(gg.list2, FUN=ggplot2::ggplotGrob))#
	if(length(grobs.list) > 25){#
		grobs.list <- grobs.list[1:25]#
	}
is.null(K)
K
gg.list  <- do.call(c, x[K-1])
gg.list
da.biPlot[K-1]
plot(da.biPlot[K-1])
da.biPlot[[K-1]]
class(da.biPlot[[K-1]])
lengths(da.biPlot[[K-1]])
lengths(da.biPlot[K-1])
class(da.biPlot[K-1])
plot(da.biPlot[K-1])
plot(da.biPlot[[K-1]])
plot(da.biPlot[[6]])
plot(da.biPlot[[5]])
gg.list  <- do.call(c, x[K-1])
lengths(gg.list)
class(gg.list)
class(gg.list[[1]])
class(gg.list[[2]])
class(gg.list[[3]])
class(gg.list[[4]])
plot(gg.list[[1]])
dev.off()
plot(gg.list[[1]])
K
K=7
print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		#if(!(minsize.grp < 4)){#
		#	ellipse.size <- 0#
		#} else {#
		#	ellipse.size <- 1.5#
		#}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df
message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions
dapc.pcabest.K$n.da>1
da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))
da.layout.mat.i
for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}
da.layout.mat.i
da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]
da.layout.mat
da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]
biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}
da.pairs.i.z
z
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}
length(biplots.da.list.i)
length(da.pairs.i)
class(biplots.da.list.i[[z]])
plot(biplots.da.list.i[[z]])
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}
plot(biplots.da.list.i[[z]])
devtools::document()
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}
plot(biplots.da.list.i[[z]])
devtools::document()
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}
plot(biplots.da.list.i[[z]])
devtools::document()
empty.set <- list(); length(empty.set) <- max.clusters-1#
	dapc.pcabest.list <- admixturePlot <- da.densityPlot <- da.biPlot <- pca.densityPlot <- pca.biPlot <- da.psets <- da.layout.mat<- pca.psets <- pca.layout.mat <- assignmentPlot <- posterior.list <- mapplot <- q.df <- dapc.df <- empty.set#
	message("step 3")#
	density.stop<-FALSE#
	for(K in 2:max.clusters){#
		print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		if(!(minsize.grp < 4)){#
			ellipse.size <- 0#
		} else {#
			ellipse.size <- 1.5#
		}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=ellipse.size,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=ellipse.size,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste(K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste(K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste(K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}
da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each discriminant function for each population cluster"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each retained principle component for each population cluster"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	message("step 7")#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biplot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biplot.arranged <- NULL#
	}#
	message("step 8")#
	dapc.componentPlots <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
devtools:document()
devtools::document()
any(lengths(pca.biPlot)>0)
empty.set <- list(); length(empty.set) <- max.clusters-1#
	dapc.pcabest.list <- admixturePlot <- da.densityPlot <- da.biPlot <- pca.densityPlot <- pca.biPlot <- da.psets <- da.layout.mat<- pca.psets <- pca.layout.mat <- assignmentPlot <- posterior.list <- mapplot <- q.df <- dapc.df <- empty.set#
	message("step 3")#
	density.stop<-FALSE#
	for(K in 2:max.clusters){#
		print(paste(K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		#if(!(minsize.grp > 1) & !density.stop){#
		#	density.stop <- TRUE#
		#}#
		#if(!(minsize.grp < 4)){#
		#	ellipse.size <- 0#
		#} else {#
		#	ellipse.size <- 1.5#
		#}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste(K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste(K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste(K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste(K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste(K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste(K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K#
	message("step 4")#
	da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each discriminant function for each population cluster"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each retained principle component for each population cluster"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}#
	# rangeK.da.density  <- 2:(length(lengths(da.densityPlot))+1)#
	# n.da.density       <- max(lengths(da.densityPlot),na.rm=TRUE)#
	# rangeK.pca.density <- 2:(length(lengths(pca.densityPlot))+1)#
	# n.pca.density      <- max(lengths(pca.densityPlot),na.rm=TRUE)
devtools::document()
empty.set <- list(); length(empty.set) <- max.clusters-1#
	dapc.pcabest.list <- admixturePlot <- da.densityPlot <- da.biPlot <- pca.densityPlot <- pca.biPlot <- da.psets <- da.layout.mat<- pca.psets <- pca.layout.mat <- assignmentPlot <- posterior.list <- mapplot <- q.df <- dapc.df <- empty.set#
	message("step 3")#
	density.stop<-FALSE#
	for(K in 2:max.clusters){#
		print(paste("K=",K,"step 3.1"))#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		### Fewest number of individuals assigned to any cluster.#
		minsize.grp <- min(table(as.numeric(dapc.pcabest.K$assign)))#
		# switch density.stop to TRUE the first time minsize.grp is 1#
		if(!(minsize.grp > 1) & !density.stop){#
			density.stop <- TRUE#
		}#
		#if(!(minsize.grp < 4)){#
		#	ellipse.size <- 0#
		#} else {#
		#	ellipse.size <- 1.5#
		#}#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		message(paste("K=",K,"step 3.2"))#
		### density plots of discriminant functions#
		if(!density.stop){#
			density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
			for(z in 1:dapc.pcabest.K$n.da){#
				density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.da.list.i <- list(NULL)#
		}#
		message(paste("K=",K,"step 3.3"))#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		message(paste("K=",K,"step 3.4"))#
		##### ggplot density plots of principle components#
		if(!density.stop){#
			density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
			for(z in 1:dapc.pcabest.K$n.pca){#
				density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
			}#
		} else {#
			density.pca.list.i <- list(NULL)#
		}#
		message(paste("K=",K,"step 3.5"))#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cellipse=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		message(paste("K=",K,"step 3.6"))#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		message(paste("K=",K,"step 3.7"))#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		message(paste("K=",K,"step 3.8"))#
		message(paste0("smallest cluster has ",minsize.grp," individuals"))#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		message(paste("K=",K,"step 3.9"))#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K#
	message("step 4")#
	da.dens.plotsPerK <- sapply(1:length(da.densityPlot),FUN=function(x){max(lengths(da.densityPlot[[x]]))})#
	if(any(da.dens.plotsPerK>0)){#
		da.densityPlot2      <- da.densityPlot[which(da.dens.plotsPerK>0)]#
		da.density.arranged  <- dapc.plot.arrange(da.densityPlot2,variable="DF",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each discriminant function for each population cluster"), NULL))#
	} else {#
		da.density.arranged  <- NULL#
	}#
	message("step 5")#
	pca.dens.plotsPerK <- sapply(1:length(pca.densityPlot),FUN=function(x){max(lengths(pca.densityPlot[[x]]))})#
	if(any(pca.dens.plotsPerK>0)){#
		pca.densityPlot2 <- pca.densityPlot[which(pca.dens.plotsPerK>0)]#
		pca.density.arranged <- dapc.plot.arrange(pca.densityPlot2,variable="PC",pos.x.labs=1,pos.y.labs=2,outer.text=list(NULL,NULL,paste0("For each K, the density distribution of each retained principle component for each population cluster"), NULL))#
	} else {#
		pca.density.arranged <- NULL#
	}
plot(da.density.arranged)
plot(pca.density.arranged)
any(lengths(da.biPlot)>0)
rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]
rangeK.da
n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)
n.da
names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})
names.bottom.da
names.left.da
da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}
any(lengths(pca.biPlot)>0)
rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)
n.pca
names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})
names.bottom.pca
names.left.pca
pca.biplot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})
z
length(rangeK.pca)
rangeK.pca
lengths(pca.biPlot)
k=rangeK.pca[1];test=dapc.biplot.arrange(pca.biPlot,K=k,layout.mat=pca.layout.mat[[k-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==k)]],row.labels.left=names.left.pca[[which(rangeK.pca==k)]],outer.text=list(NULL,NULL,paste0("K=",k,"; Biplots of retained principle components"),NULL))
plot(test)
k=rangeK.pca[2];test=dapc.biplot.arrange(pca.biPlot,K=k,layout.mat=pca.layout.mat[[k-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==k)]],row.labels.left=names.left.pca[[which(rangeK.pca==k)]],outer.text=list(NULL,NULL,paste0("K=",k,"; Biplots of retained principle components"),NULL));plot(test)
rangeK.pca[2]
k
length(pca.biPlot)
length(pca.biPlot[[1]])
length(pca.biPlot[[2]])
class(pca.biPlot[[2]])
class(pca.biPlot[[2]][1])
class(pca.biPlot[[2]][[1]])
plot(class(pca.biPlot[[2]][[1]]))
plot(class(pca.biPlot[[2]][[2]]))
plot(class(pca.biPlot[[2]][[3]]))
length(pca.biPlot)
plot(class(pca.biPlot[[3]][[1]]))
k=rangeK.pca[2];test=dapc.biplot.arrange(pca.biPlot,K=k,layout.mat=pca.layout.mat[[k-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==k)]],row.labels.left=names.left.pca[[which(rangeK.pca==k)]],outer.text=list(NULL,NULL,paste0("K=",k,"; Biplots of retained principle components"),NULL));plot(test)
k
n.pca
length(n.pca)
length(rangeK.pca)
names(n.pca) <- paste0("K",rangeK.pca)
n.pca
x=pca.biPlot;K=4;layout.mat=da.layout.mat[[4-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==4)]];row.labels.left=names.left.da[[which(rangeK.da==4)]]; outer.text=list(NULL,NULL,paste0("K=",4,"; Biplots of retained principle components"),NULL)
x=pca.biPlot;K=4;layout.mat=da.layout.mat[[4-1]];use.diag=NULL;col.labels.bottom=names.bottom.da[[which(rangeK.da==4)]];row.labels.left=names.left.da[[which(rangeK.da==4)]]; outer.text=list(NULL,NULL,paste0("K=",4,"; Biplots of retained principle components"),NULL); pad=0.1#
row.labels.right=NULL#
col.labels.top=NULL
if(length(outer.text)!=4 | !is(outer.text,"list")){#
		outer.text <- rep(list(NULL),4)#
		warning("'outer.text' ignored because not a list or length(outer.text)!=4.")#
	}#
	if(is.null(K)){#
		gg.list  <- do.call(c, x)#
	} else {#
		gg.list  <- do.call(c, x[K-1])#
	}
class(gg.list)
lengths(gg.list)
is.null(K)
K
class(x[K-1])
length(x[K-1])
class(x[K-1][[1]])
gg.list2 <- gg.list[which(lengths(gg.list)!=0)]
length(gg.list2)
k
grobs.list <- suppressWarnings(lapply(gg.list2, FUN=ggplot2::ggplotGrob))
class(grobs.list)
class(grobs.list[[1]])
class(grobs.list[[2]])
plot(grobs.list[[1]])
length(grobs.list) > 25
if(length(grobs.list) > 25){#
		grobs.list <- grobs.list[1:25]#
	}
length(grobs.list)
if(is.null(layout.mat)){#
		range.list   <- list(c(1),c(2:4),c(5:9),c(10:16),c(17:25))#
		layout.test  <- sapply(1:length(range.list),function(x){length(grobs.list) %in% range.list[[x]]})#
		if(any(layout.test)){#
			layout.index  <- which(layout.test)#
			layout.vector <- rep(NA,layout.index^2)#
			layout.vector[1:length(grobs.list)] <- 1:length(grobs.list)#
			layout.mat    <- matrix(data=layout.vector,ncol=layout.index,byrow=TRUE)#
		}#
		na.rowcheck <- unlist(apply(layout.mat,MARGIN=1,FUN=function(x){all(is.na(x))}))#
		if(any(na.rowcheck)){#
			layout.mat <- layout.mat[which(!na.rowcheck),]#
		}#
	}
layout.mat
is.null(layout.mat)
pca.layout.mat[[4-1]]
layout.mat=pca.layout.mat[[4-1]]
x=pca.biPlot;K=4;layout.mat=pca.layout.mat[[4-1]];use.diag=NULL;col.labels.bottom=names.bottom.pca[[which(rangeK.pca==4)]];row.labels.left=names.left.pca[[which(rangeK.pca==4)]]; outer.text=list(NULL,NULL,paste0("K=",4,"; Biplots of retained principle components"),NULL); pad=0.1
if(length(outer.text)!=4 | !is(outer.text,"list")){#
		outer.text <- rep(list(NULL),4)#
		warning("'outer.text' ignored because not a list or length(outer.text)!=4.")#
	}#
	if(is.null(K)){#
		gg.list  <- do.call(c, x)#
	} else {#
		gg.list  <- do.call(c, x[K-1])#
	}#
	gg.list2 <- gg.list[which(lengths(gg.list)!=0)]
grobs.list <- suppressWarnings(lapply(gg.list2, FUN=ggplot2::ggplotGrob))#
	if(length(grobs.list) > 25){#
		grobs.list <- grobs.list[1:25]#
	}
if(is.null(layout.mat)){#
		range.list   <- list(c(1),c(2:4),c(5:9),c(10:16),c(17:25))#
		layout.test  <- sapply(1:length(range.list),function(x){length(grobs.list) %in% range.list[[x]]})#
		if(any(layout.test)){#
			layout.index  <- which(layout.test)#
			layout.vector <- rep(NA,layout.index^2)#
			layout.vector[1:length(grobs.list)] <- 1:length(grobs.list)#
			layout.mat    <- matrix(data=layout.vector,ncol=layout.index,byrow=TRUE)#
		}#
		na.rowcheck <- unlist(apply(layout.mat,MARGIN=1,FUN=function(x){all(is.na(x))}))#
		if(any(na.rowcheck)){#
			layout.mat <- layout.mat[which(!na.rowcheck),]#
		}#
	}#
	nm  <- nrow(layout.mat)#
	nn  <- ncol(layout.mat)#
	len <- nm*nn
nm
nn
len
9*9
vals     <- c(t(layout.mat))#
	numplots <- length(vals)
if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}
empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)
index.matrix
layout.mat
use.diag
1 %in% use.diag
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}#
	if(nn>1){#
		if(2 %in% use.diag & nm==nn){#
			left.mat   <- empty.matrix#
			left.mat[diag(index.matrix)] <- row.labels.left#
		} else {#
			left.mat   <- unname(cbind(row.labels.left,matrix(data="",nrow=nm,ncol=(nn-1))))#
		}#
		if(4 %in% use.diag & nm==nn){#
			right.mat  <- empty.matrix#
			right.mat[diag(index.matrix)] <- row.labels.right#
		} else {#
			right.mat  <- unname(cbind(matrix(data="",nrow=nm,ncol=(nn-1)),row.labels.right))#
		}#
	} else {#
		left.mat   <- matrix(data=row.labels.left,ncol=1)#
		right.mat  <- matrix(data=row.labels.right,ncol=1)#
	}
grobsTable.list <- list(); length(grobsTable.list) <- length(vals)
length(vals)
grobs.list <- suppressWarnings(lapply(gg.list2, FUN=ggplot2::ggplotGrob))
if(is.null(layout.mat)){#
		range.list   <- list(c(1),c(2:4),c(5:9),c(10:16),c(17:25))#
		layout.test  <- sapply(1:length(range.list),function(x){length(grobs.list) %in% range.list[[x]]})#
		if(any(layout.test)){#
			layout.index  <- which(layout.test)#
			layout.vector <- rep(NA,layout.index^2)#
			layout.vector[1:length(grobs.list)] <- 1:length(grobs.list)#
			layout.mat    <- matrix(data=layout.vector,ncol=layout.index,byrow=TRUE)#
		}#
		na.rowcheck <- unlist(apply(layout.mat,MARGIN=1,FUN=function(x){all(is.na(x))}))#
		if(any(na.rowcheck)){#
			layout.mat <- layout.mat[which(!na.rowcheck),]#
		}#
	}#
	nm  <- nrow(layout.mat)#
	nn  <- ncol(layout.mat)#
	len <- nm*nn#
	vals     <- c(t(layout.mat))#
	numplots <- length(vals)#
	if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}
empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)#
	### Matrices holding the bottom, left, top, and right labels, respectively, for each plot.#
	if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}#
	if(nn>1){#
		if(2 %in% use.diag & nm==nn){#
			left.mat   <- empty.matrix#
			left.mat[diag(index.matrix)] <- row.labels.left#
		} else {#
			left.mat   <- unname(cbind(row.labels.left,matrix(data="",nrow=nm,ncol=(nn-1))))#
		}#
		if(4 %in% use.diag & nm==nn){#
			right.mat  <- empty.matrix#
			right.mat[diag(index.matrix)] <- row.labels.right#
		} else {#
			right.mat  <- unname(cbind(matrix(data="",nrow=nm,ncol=(nn-1)),row.labels.right))#
		}#
	} else {#
		left.mat   <- matrix(data=row.labels.left,ncol=1)#
		right.mat  <- matrix(data=row.labels.right,ncol=1)#
	}#
	grobsTable.list <- list(); length(grobsTable.list) <- length(vals)
for(i in 1:length(vals)){#
		#### Either creating an empty grob or getting a grob from grobs.list#
		if(is.na(vals[i])){#
			grob.i          <- grid::rectGrob(gp=grid::gpar(col=NA))#
		} else {#
			grob.i          <- grobs.list[[vals[i]]]#
		}#
		z <- which(index.matrix == i, arr.ind=TRUE)#
		labels.i.list  <- list(bottom.mat[z],left.mat[z],top.mat[z],right.mat[z])#
		if(is.null(use.diag)){#
			labels.i.list2 <- list(); length(labels.i.list2) <- 4#
			for(j in 1:4){#
				if(labels.i.list[[j]]!=""){#
					labels.i.list2[[j]] <- labels.i.list[[j]]#
				}#
			}#
		} else {#
			labels.i.list2 <- labels.i.list#
		}#
	#	grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=bottom.mat[z],left=left.mat[z],top=top.mat[z],right=right.mat[z])#
		grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=labels.i.list2[[1]],left=labels.i.list2[[2]],top=labels.i.list2[[3]],right=labels.i.list2[[4]])#
	}
grobs.arranged0 <- gridExtra::arrangeGrob(grobs=grobsTable.list,layout_matrix=index.matrix,padding=unit(pad,"line"),respect=TRUE)
if(nrow(grobs.arranged0)>maxMat[1]){#
		grobs.arranged0 <- grobs.arranged0[c(1:maxMat[1]),]#
	}#
	### trim the figure if too many columns#
	if(ncol(grobs.arranged0)>maxMat[2]){#
		grobs.arranged0 <- grobs.arranged0[,c(1:maxMat[2])]#
	}#
	if(!is.null(unlist(outer.text))){#
		grobs.arranged <- gridExtra::arrangeGrob(grobs.arranged0,bottom=outer.text[[1]],left=outer.text[[2]],top=outer.text[[3]],right=outer.text[[4]])#
	} else {#
		grobs.arranged <- grobs.arranged0#
	}
plot(grobs.arranged)
devtools::document()
message("step 6")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	message("step 7")#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names(n.pca)        <- paste0("K",rangeK.pca)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biplot.arranged <- lapply(rangeK.pca, FUN=function(k){dapc.biplot.arrange(pca.biPlot,K=k,layout.mat=pca.layout.mat[[k-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==k)]],row.labels.left=names.left.pca[[which(rangeK.pca==k)]],outer.text=list(NULL,NULL,paste0("K=",k,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biplot.arranged <- NULL#
	}#
	message("step 8")
dapc.componentPlots <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
message("step 9")#
	q.df    <- do.call(rbind,q.df)#
	#dapc.df <- do.call(rbind,dapc.df)#
	if(".Qlog" %in% include.out){#
		write.table(x=q.df,file=paste0(tools::file_path_sans_ext(save.as),".Qlog"),row.names=FALSE,col.names=TRUE,quote=FALSE,sep="\t")#
	}
message("step 10.0")#
	results1            <- list(BICPlot,grp.plot2)#
	message("step 10.1")#
	results1.grobs.list <- lapply(results1, FUN=ggplot2::ggplotGrob)#
	message("step 10.2")#
	results1.gtable     <- lapply(X=results1.grobs.list,FUN=gridExtra::arrangeGrob)#
	message("step 10.3")#
	results2 <- dapc.componentPlots#
	message("step 10.4")#
	if(!is.null(coords)){#
		results3 <- c(admixturePlot,assignmentPlot,mapplot)#
	} else {#
		results3 <- c(admixturePlot,assignmentPlot)#
	}
message("step 10.5")#
	results3.grobs.list <- lapply(results3, FUN=ggplot2::ggplotGrob)#
	message("step 10.6")#
	results3.gtable     <- lapply(X=results3.grobs.list,FUN=gridExtra::arrangeGrob)#
	message("step 10.7")#
	result <- c(results1.gtable,results2,results3.gtable)#
	message("step 11")
if(".pdf" %in% include.out){#
		pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		for(i in 1:length(result)){#
			grid::grid.draw(result[[i]])#
			if(i < length(result)){#
				grid.newpage()#
			}#
		}#
		dev.off()#
	}
?grid.newpage
dev.off()
dev.off()
if(".pdf" %in% include.out){#
		pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		for(i in 1:length(result)){#
			grid::grid.draw(result[[i]])#
			if(i < length(result)){#
				grid::grid.newpage()#
			}#
		}#
		dev.off()#
	}
devtools::document()
q()
