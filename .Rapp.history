test3
crs(world_sf)
raster::crs(world_sf)
x.min
x.max
ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA)
class(ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA))
test
names(test)
test$mapping
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf,mapping=NULL, colour = "black", fill = NA) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf,mapping=aes(fill=AREA), colour = "black", fill = NA) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf,mapping=ggplot2::aes(fill=AREA), colour = "black", fill = NA) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf,mapping=ggplot2::aes(fill=AREA), colour = "black", fill = NA,inherit.aes=F) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA,inherit.aes=F) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2
mcmcdir=mcmcpath; plots.chain     <- suppressWarnings(reemsplots2::make_eems_plots(mcmcdir, longlat = TRUE))
spdf_world_10    <- rnaturalearth::ne_countries(scale=10)#
	#spdf_oceans_10   <- invisible(rnaturalearth::ne_download(scale = 10, type = 'ocean', category = 'physical'))#
	# oceans <- misc.wrappers::spdf_oceans_10#
	spdf_oceans_10 <- misc.wrappers::spdf_oceans_10
world_sf <- spdf_world_10[1]
mapplot  <- list(); length(mapplot) <- length(plots.chain)
coordinates <- sp::SpatialPoints(data.matrix(read.table(paste0(mcmcdir,"/rdistoDemes.txt"),header=F))[,1:2])
coordinates
class(coordinates)
coords2 <- read.table(paste0(mcmcdir,"/rdistoDemes.txt"),header=F)
coords2
coords2 <- read.table(paste0(mcmcdir,"/rdistoDemes.txt"),header=F)[,c(1:2)]
coords2
coordinates <- read.table(paste0(mcmcdir,"/rdistoDemes.txt"),header=F)[,c(1:2)]#
		colnames(coordinates) <- c("Lon","Lat")
i=1
mapplot  <- list(); length(mapplot) <- length(plots.chain)
mapplot.i    <- plots.chain[[i]]#
		mapplot2.i   <- mapplot.i + ggplot2::theme_classic() + ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA,inherit.aes=FALSE) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot2.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot2.i#
		}
plot.coords=T
mapplot.i    <- plots.chain[[i]]#
		mapplot2.i   <- mapplot.i + ggplot2::theme_classic() + ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA,inherit.aes=FALSE) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot2.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot2.i#
		}
mapplot[[1]]
i
mapplot2.i
mapplot.i
mapplot2.i   <- mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
mapplot2.i
y.min
y.max
test2 <- mapplot.i  + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA,inherit.aes=F) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
test2
mapplot.i
class(mapplot.i)
mapplot.i <- plots[[i]]
mapplot.2i <- mapplot.i + ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA,inherit.aes=F) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
plot(mapplot.2i)
world_sf <- rnaturalearth::ne_countries(scale=10,returnclass="sf")[1]
mapplot.2i <- mapplot.i + ggplot2::geom_sf(data=world_sf,colour = "black", fill = NA,inherit.aes=F) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
world_sf <- rnaturalearth::ne_countries(scale=10,returnclass="sf")[1]#
	world_sp <- rnaturalearth::ne_countries(scale=10,returnclass="sp")
mapplot.i    <- plots.chain[[i]]#
		mapplot2.i   <- mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
mapplot2.i
if(plot.coords){#
			mapplot[[i]] <- mapplot2.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot2.i#
		}
mapplot[[i]]
class(spdf_oceans_10)
class(world_sf)
library(sf)
test <- ggplot2::st_sf(spdf_oceans_10)
test <- st_sf(spdf_oceans_10)
test <- st_as_sf(spdf_oceans_10)
oceans_sf <- sf::st_as_sf(spdf_oceans_10)
mapplot3.i   <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
mapplot3.i
mapplot.i  <- plots.chain[[i]]#
		mapplot2.i <- mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE))
mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)
mapplot4.i
mapplot.i  <- plots.chain[[i]]#
		coords <- unique(mapplot.i$data[,c(1:2)])
dim(coords)
colnames(coords) <- c("Lon","Lat")#
		x.min    <- min((coords[,1]-0.5))#
		x.max    <- max((coords[,1]+0.5))#
		y.min    <- min((coords[,2]-0.5))#
		y.max    <- max((coords[,2]+0.5))
mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot2.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot2.i#
		}
mapplot[[i]]
if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}
mapplot[[i]]
x.min    <- min(coords[,1])#
		x.max    <- max(coords[,1])#
		y.min    <- min(coords[,2])#
		y.max    <- max(coords[,2])#
		mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}
mapplot[[i]]
for(i in 1:length(plots.chain)){#
		mapplot.i  <- plots.chain[[i]]#
		coords <- unique(mapplot.i$data[,c(1:2)])#
		colnames(coords) <- c("Lon","Lat")#
		#x.min    <- min((coords[,1]-0.5))#
		#x.max    <- max((coords[,1]+0.5))#
		#y.min    <- min((coords[,2]-0.5))#
		#y.max    <- max((coords[,2]+0.5))#
		x.min    <- min(coords[,1])#
		x.max    <- max(coords[,1])#
		y.min    <- min(coords[,2])#
		y.max    <- max(coords[,2])#
		mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}#
	}
mapplot[[2]]
for(i in 1:length(plots.chain)){#
		mapplot.i  <- plots.chain[[i]]#
		coords <- unique(mapplot.i$data[,c(1:2)])#
		colnames(coords) <- c("Lon","Lat")#
		x.min    <- min((coords[,1]-0.5))#
		x.max    <- max((coords[,1]+0.5))#
		y.min    <- min((coords[,2]-0.5))#
		y.max    <- max((coords[,2]+0.5))#
		#x.min    <- min(coords[,1])#
		#x.max    <- max(coords[,1])#
		#y.min    <- min(coords[,2])#
		#y.max    <- max(coords[,2])#
		mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}#
	}
mapplot[[2]]
plot1 <- plots.chain[[1]]
data1 <- plot1$data
dim(data1)
data2 <- plots.chain[[2]]$data
dim(data2)
data3 <- plots.chain[[3]]$data
dim(data3)
length(plots.chain)
plots.dat <- lapply(X=plots.chain,FUN=function(x) x$data)
dim(plots.dat[[1]])
plot.coords=T; plot.geography=T; mask.oceans=T; include.out=c("pdf","raster")
save.in=NULL
if(is.null(save.in)){#
		save.in <- mcmcdir#
	}
for(i in 1:length(plots.chain)){#
		mapplot.i  <- plots.chain[[i]]#
		coords <- unique(mapplot.i$data[,c(1:2)])#
		colnames(coords) <- c("Lon","Lat")#
		x.min    <- min((coords[,1]-0.5))#
		x.max    <- max((coords[,1]+0.5))#
		y.min    <- min((coords[,2]-0.5))#
		y.max    <- max((coords[,2]+0.5))#
		#x.min    <- min(coords[,1])#
		#x.max    <- max(coords[,1])#
		#y.min    <- min(coords[,2])#
		#y.max    <- max(coords[,2])#
		# Add country borders#
		if(plot.geography){#
			mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		} else {#
			mapplot2.i <- mapplot.i#
		}#
		# Mask oceans#
		if(mask.oceans){#
			mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		} else {#
			mapplot3.i <- mapplot2.i#
		}#
		# Crop to window defined by xmin, xmax, ymin, ymax#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max), expand=FALSE)#
		# Add points for coordinates of samples#
		if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}#
	}
mapplot[[1]]
mapplot[[2]]
mapplot[[3]]
mapplot[[4]]
mapplot[[5]]
plots.chain[[4]]
plots.chain[[5]]
plots.chain[[6]]
plots.chain[[7]]
plots.chain[[8]]
mapplot  <- list(); length(mapplot) <- 4#
	for(i in 1:4){#
		mapplot.i  <- plots.chain[[i]]#
		coords <- unique(mapplot.i$data[,c(1:2)])#
		colnames(coords) <- c("Lon","Lat")#
		x.min    <- min((coords[,1]-0.5))#
		x.max    <- max((coords[,1]+0.5))#
		y.min    <- min((coords[,2]-0.5))#
		y.max    <- max((coords[,2]+0.5))#
		#x.min    <- min(coords[,1])#
		#x.max    <- max(coords[,1])#
		#y.min    <- min(coords[,2])#
		#y.max    <- max(coords[,2])#
		# Add country borders#
		if(plot.geography){#
			mapplot2.i <- suppressMessages(mapplot.i + ggplot2::geom_sf(data=world_sf, colour = "black", fill = NA, inherit.aes=FALSE)) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		} else {#
			mapplot2.i <- mapplot.i#
		}#
		# Mask oceans#
		if(mask.oceans){#
			mapplot3.i <- mapplot2.i + ggplot2::geom_sf(data=oceans_sf, colour = NA, fill = "white", inherit.aes=FALSE) # + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max),expand=FALSE)#
		} else {#
			mapplot3.i <- mapplot2.i#
		}#
		# Crop to window defined by xmin, xmax, ymin, ymax#
		mapplot4.i <- mapplot3.i + ggplot2::coord_sf(xlim=c(x.min, x.max), ylim=c(y.min, ymax=y.max), expand=FALSE)#
		# Add points for coordinates of samples#
		if(plot.coords){#
			mapplot[[i]] <- mapplot4.i + ggplot2::geom_point(data = coordinates, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		} else {#
			mapplot[[i]] <- mapplot4.i#
		}#
	}
result.gglist <- c(mapplot,plots.chain[5:8])
result.gglist[[1]]
result.gglist[[2]]
result.gglist[[3]]
result.gglist[[4]]
"pdf" %in% include.out
save.as.pdf <- file.path(save.in,"EEMS_maps.pdf")
save.as.pdf
getwd()
save.in <- "/Users/alyssaleinweber/Documents/"
save.as.pdf <- file.path(save.in,"EEMS_maps.pdf")
save.as.psd
save.as.pdf
pdf(height=6, width=8, file=save.as.pdf, onefile=TRUE)#
			lapply(X=result.gglist, FUN=print)#
		dev.off()
length(result.gglist)
dev.off()
dev.off()
pdf(height=6, width=8, file=save.as.pdf, onefile=TRUE)#
			#lapply(X=result.gglist, FUN=print)#
			print(result.gglist)#
		dev.off()
save.as.raster <- file.path(save.in,"EEMS_maps.tif")
plots.dat      <- lapply(X=plots.chain[1:4],FUN=function(x) x$data)
plots.dat[[1]][1:10,]
plots.dat[[2]][1:10,]
plots.dat[[3]][1:10,]
plots.dat[[4]][1:10,]
plots.dat[[5]][1:10,]
plots.mat <- matrix(data=NA, ncol=plots.chain[[1]]$x, nrow=plots.chain[[1]]$y)
plots.mat <- matrix(data=NA, ncol=length(unique(plots.chain[[1]]$x)), nrow= length(unique(plots.chain[[1]]$y)) )
NAmat <- matrix(data=NA, ncol=length(unique(plots.chain[[1]]$x)), nrow= length(unique(plots.chain[[1]]$y)))
dim(NAmat)
length(unique(plots.chain[[1]]$x)
length(unique(plots.chain[[1]]$x))
length(unique(plots.chain[[1]][,"x"]))
dim(plots.chain[[1]])
length(unique(plots.dat[[1]]$x))
NAmat <- matrix(data=NA, ncol=length(unique(plots.dat[[1]]$x)), nrow= length(unique(plots.dat[[1]]$y)))
dim(NAmat)
colnames(NAmat) <- unique(plots.dat[[1]]$x)#
		rownames(NAmat) <- unique(plots.dat[[1]]$y)
NAmat[1:5,1:5]
plots.dat[1,c("x","y")]
plots.dat[[1]][1,c("x","y")]
plots.dat2       <- lapply(X=plots.chain[1:4],FUN=function(x) as.data.frame(x$data))
plots.dat2[[1]][1:10,]
plots.dat       <- lapply(X=plots.chain[1:4],FUN=function(x) as.data.frame(x$data))
NAmat           <- matrix(data=NA, ncol=length(unique(plots.dat[[1]]$x)), nrow= length(unique(plots.dat[[1]]$y)))#
		colnames(NAmat) <- unique(plots.dat[[1]]$x)#
		rownames(NAmat) <- unique(plots.dat[[1]]$y)#
		mat.temp <- NAmat
NAmat[1:5,1:5]
plots.dat[1,c("x","y")]
plots.dat[[1]][1,c("x","y")]
mat.temp[plots.dat[[1]][1,"y"], plots.dat[[1]][1,"x"]]
plots.dat[[1]][1,"y"]
plots.dat[[1]][1,"x"]
which(rownames(mat.temp)==plots.dat[[1]][1,"y"])
mat.temp[which(rownames(mat.temp)==plots.dat[[1]][1,"y"]), which(colnames(mat.temp)==plots.dat[[1]][1,"x"])]
plots.dat[[1]][1,"z"]
i=1
mat.temp <- NAmat#
			dat.temp <- plots.dat[[i]]#
			for(z in 1:nrow(dat.temp)){#
				mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			}
mat.temp[1:10,1:10]
any(is.na(mat.temp))
length(which(is.na(mat.temp)==TRUE))
length(which(is.na(mat.temp)==FALSE))
rasterlist <- list(); length(rasterlist) <- 4
rasterlist <- list(); length(rasterlist) <- 4#
		for(i in 1:4){#
			mat.temp <- NAmat#
			dat.temp <- plots.dat[[i]]#
			for(z in 1:nrow(dat.temp)){#
				mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			}#
			rasterlist[[i]] <- mat.temp#
		}
library(raster)
?raster
test <- raster(x=rasterlist[[1]],values=TRUE)
test <- raster(x=rasterlist[[1]],vals=rasterlist[[1]])
test <- raster(x=rasterlist[[1]])
test
mat.temp[is.na(mat.temp)] <- -9999
save.as.raster  <- file.path(save.in,"EEMS_maps.tif")#
		plots.dat       <- lapply(X=plots.chain[1:4],FUN=function(x) as.data.frame(x$data))#
		NAmat           <- matrix(data=NA, ncol=length(unique(plots.dat[[1]]$x)), nrow= length(unique(plots.dat[[1]]$y)))#
		colnames(NAmat) <- unique(plots.dat[[1]]$x)#
		rownames(NAmat) <- unique(plots.dat[[1]]$y)#
		rasterlist <- list(); length(rasterlist) <- 4#
		for(i in 1:4){#
			mat.temp <- NAmat#
			dat.temp <- plots.dat[[i]]#
			for(z in 1:nrow(dat.temp)){#
				mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			}#
			mat.temp[is.na(mat.temp)] <- -9999#
			rasterlist[[i]] <- mat.temp#
		}
rasterlist2 <- lapply(X=1:4,FUN=function(x) {raster::raster(x=x,xmn=x.min,xmx=x.max,ymn=y.min,ymx=y.max)})
rasterlist2 <- lapply(X=1:4,FUN=function(x) {raster::raster(x=rasterlist[[x]],xmn=x.min,xmx=x.max,ymn=y.min,ymx=y.max)})
plot(rasterlist2[[1]])
mat.temp[!is.na(mat.temp)] <- 1
raster.temp <- raster(mat.temp,xmn=x.min,xmx=x.max,ymn=y.min,ymx=y.max)
plot(raster.temp)
for(z in 1:nrow(dat.temp)){#
				mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			}
mat.temp[!is.na(mat.temp)] <- 1
mat.temp[is.na(mat.temp)] <- -9999
raster.temp <- raster(mat.temp,xmn=x.min,xmx=x.max,ymn=y.min,ymx=y.max)
plot(raster.temp)
raster.temp
rasterlist2[[1]]
rasterlist2[[2]]
rasterlist2[[3]]
rasterlist2[[4]]
plot(rasterlist2[[4]])
res.brick <- raster::brick(rasterlist2)
save.as.raster
wb <- raster::writeRaster(x=res.brick,filename=save.as.raster,format="GTiff")
result.gglist[[1]]
dat1=list()#
dat1$x=seq(302339.6,by=1000,len=71)#
dat1$y=seq(5431470,by=1000,len=124)#
dat1$z=matrix(runif(71*124),71,124)
image(dat1,asp=1)
test <- image(dat1,asp=1)
str(test)
class(test)
test
r <-raster(#
             dat1$z,#
             xmn=range(dat1$x)[1], xmx=range(dat1$x)[2],#
             ymn=range(dat1$y)[1], ymx=range(dat1$y)[2], #
             crs=CRS("+proj=utm +zone=11 +datum=NAD83")#
            )
plot(r)
test
image(dat1,asp=1)
plot(r)
r=raster(dat1);plot(r)
r
dim(rasterlist[[1]])
dim(plots.dat[[1]])
dat.temp.list <- list(); length(dat.temp.list) <- 3
i=1
dat.temp <- plots.dat[[i]]
colnames(dat.temp)
dat.temp.list   <- apply(X=dat.temp,MARGIN=2,FUN=function(x){x})
names(dat.temp.list)
lengths(dat.temp.list)
length(dat.temp.list)
ncol(dat.temp)
dat.temp.list   <- lapply(X=1:3, FUN=function(x){dat.temp[,x]})
length(dat.temp.list)
lengths(dat.temp.list)
names(dat.temp.list)
names(dat.temp.list) <- colnames(dat.temp)
test <- <- raster::raster(dat.temp.list)
test <- raster::raster(dat.temp.list)
e <- extent(dat.temp[,1:2])
e
r <- raster(e, ncol=length(unique(dat.temp$x)), nrow=length(unique(dat.temp$y)))
x <- raster::rasterize(dat.temp[, 1:2], r, dat.temp[,3], fun=mean)
plot(x)
x
rasterlist <- list(); length(rasterlist) <- 4#
		for(i in 1:4){#
			dat.temp <- plots.dat[[i]]#
			#dat.temp.list        <- lapply(X=1:3, FUN=function(x){dat.temp[,x]})#
			#names(dat.temp.list) <- colnames(dat.temp)#
			e.temp <- raster::extent(dat.temp[,1:2])#
			r.temp <- raster::raster(e.temp, ncol=length(unique(dat.temp$x)), nrow=length(unique(dat.temp$y)))#
			rasterlist[[i]] <- raster::rasterize(dat.temp[, 1:2], r.temp, dat.temp[,3], fun=mean)#
			# rasterlist[[i]] <- raster::raster(dat.temp.list)#
			# dat.temp.list   <- list(); length(dat.temp.list) <- 3#
			# dat.temp.list$x <- dat.temp$x#
			# dat.temp.list$y <- dat.temp$y#
			# dat.temp.list$x <- dat.temp$z#
			# mat.temp <- NAmat#
			# for(z in 1:nrow(dat.temp)){#
			# 	mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			# }#
			# mat.temp[is.na(mat.temp)] <- -9999#
			# rasterlist[[i]] <- mat.temp#
		}
res.brick <- raster::brick(rasterlist)
wb <- raster::writeRaster(x=res.brick, filename=save.as.raster, format="GTiff")
wb <- raster::writeRaster(x=res.brick, filename=save.as.raster, format="GTiff",overwrite=T)
?rasterize
rasterlist <- list(); length(rasterlist) <- 4#
		for(i in 1:4){#
			dat.temp <- plots.dat[[i]]#
			#dat.temp.list        <- lapply(X=1:3, FUN=function(x){dat.temp[,x]})#
			#names(dat.temp.list) <- colnames(dat.temp)#
			e.temp <- raster::extent(dat.temp[,1:2])#
			r.temp <- raster::raster(e.temp, ncol=length(unique(dat.temp$x)), nrow=length(unique(dat.temp$y)))#
			rasterlist[[i]] <- raster::rasterize(dat.temp[, 1:2], r.temp, dat.temp[,3], fun=mean, background=-9999)#
			# rasterlist[[i]] <- raster::raster(dat.temp.list)#
			# dat.temp.list   <- list(); length(dat.temp.list) <- 3#
			# dat.temp.list$x <- dat.temp$x#
			# dat.temp.list$y <- dat.temp$y#
			# dat.temp.list$x <- dat.temp$z#
			# mat.temp <- NAmat#
			# for(z in 1:nrow(dat.temp)){#
			# 	mat.temp[which(rownames(mat.temp)==dat.temp[z,"y"]), which(colnames(mat.temp)==dat.temp[z,"x"])] <- dat.temp[z,"z"]#
			# }#
			# mat.temp[is.na(mat.temp)] <- -9999#
			# rasterlist[[i]] <- mat.temp#
		}#
		#### Now need to turn each matrix in rasterlist into an actual raster object, then hold the rasters in a rasterbrick, then rasterbrick as geotiff#
		#rasterlist2 <- lapply(X=1:4,FUN=function(x) {raster::raster(x=rasterlist[[x]],xmn=x.min,xmx=x.max,ymn=y.min,ymx=y.max)})#
		res.brick <- raster::brick(rasterlist)
wb <- raster::writeRaster(x=res.brick, filename=save.as.raster, format="GTiff",overwrite=T)
install.packages("raster")
library(raster)
wb <- raster::writeRaster(x=res.brick, filename=save.as.raster, format="GTiff",overwrite=T)
getwd()
devtools::document()
remotes::install_github("JeffWeinell/misc.wrappers",upgrade=FALSE)
q()
