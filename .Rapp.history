paste0(names(formals(testfunB),unname(c(formals(testfunB))))
)
paste0(names(formals(testfunB)),unname(c(formals(testfunB))))
paste(paste0(names(formals(testfunB)),unname(c(formals(testfunB)))),collapse=",")
paste(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),collapse=",")
paste(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),collapse=",")
setdiff(paste0(names(formals(testfunB)),unname(c(formals(testfunB)))),"...")
paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"..."),collapse=",")
paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=",")
form.expr=paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=",")
?expr
form.expr
paste0("testfunB(",form.expr=paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=","),")")
paste0("testfunB(",paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=","),")")
form.expr=paste0("testfunB(",paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=","),")")
form.expr
eval(form.expr)
eval(expr=form.expr)
?eval
sys.call(form.expr)
call(form.expr)
call(testfunB,"argB1=10,argB2=10")
call("testfunB","argB1=10,argB2=10")
call("testfunB",cat("argB1=10,argB2=10"))
call("testfunB",return("argB1=10,argB2=10"))
call("testfunB",eval("argB1=10,argB2=10"))
call("testfunB",expr("argB1=10,argB2=10"))
call("testfunB",parse(test="argB1=10,argB2=10"))
call("testfunB",parse("argB1=10,argB2=10"))
call("testfunB",parse(text="argB1=10,argB2=10"))
form.expr=paste0("testfunB(",paste(setdiff(paste0(names(formals(testfunB)),"=",unname(c(formals(testfunB)))),"...="),collapse=","),")")
form.expr
parse(text= form.expr)
eval(parse(text= form.expr))
testfunB <- function(argB1=10,argB2=10,...){#
	return(formals())#
	return(argB1/argB2)#
}
testfunB()
testfunB <- function(argB1=10,argB2=10,...){#
	fun.name = sys.function(sys.parent())#
	return(c(list(function=fun.name),formals()))#
	return(argB1/argB2)#
}
testfunB <- function(argB1=10,argB2=10,...){#
	fun.name <- list(sys.function(sys.parent()))#
	fun.args <- formals()#
	return(c(fun.name,fun.args))#
	#return(argB1/argB2)#
}
testfunB()
testfunB <- function(argB1=10,argB2=10,...){#
	fun.name <- list(names(sys.function(sys.parent())))#
	fun.args <- formals()#
	return(c(fun.name,fun.args))#
	#return(argB1/argB2)#
}
testfunB()
testfunB
class(testfunB)
str(testfunB)
attr(testfunB)
attributes(testfunB)
formals(testfunB)
fun.name <- "testfunB"
get(fun.name)
fun.args <- formals(get("fun.name"))
fun.args
names(fun.args)
test <- unname(fun.args)
test
formals(get("fun.name"))[-c("...")]
setdiff(names(fun.args),"...")
fun.args0 <- formals(get("fun.name"))
fun.args <- fun.args0[setdiff(names(fun.args0),"...")]
fun.args
buildfun <- function(x){#
	fun.name <- x#
	### List with default values for all arguments of the function#
	fun.args0 <- formals(get("fun.name"))#
	### Keep the arguments with values#
	fun.args <- fun.args0[setdiff(names(fun.args0),"...")]#
	return(fun.args)#
}
buildfun("testfunB")
argnames <- names(fun.args)
argnames0 <- names(fun.args)
testfunB <- function(x,argB1=10,argB2=10,...){#
	fun.name <- list(names(sys.function(sys.parent())))#
	fun.args <- formals()#
	return(c(fun.name,fun.args))#
	#return(argB1/argB2)#
}
fun.name <- testfunB
fun.name
fun.args0 <- formals(get("fun.name"))#
	### Keep arguments except for "..."#
	fun.args <- fun.args0[setdiff(names(fun.args0),"...")]#
	### Character vector with names of all arguments, including those without default values, but not "..."#
	argnames0 <- names(fun.args)
argnames0
fun.args
fun.args$x
missing(fun.args)
missing(fun.args$x)
length(fun.args$x)
class(fun.args$x)
class(fun.args$argB1)
class(fun.args)
str(fun.args)
is(fun.args$x,"symbol")
is(fun.args$x,"name")
is(fun.args,"name")
sapply(fun.args,is,"name")
argnames0 <- names(fun.args)
argnames <- argnames0[!sapply(fun.args,is,"name")]
argnames
fun.args0 <- formals(get("fun.name"))#
	### Keep arguments except for "..."#
	fun.args1 <- fun.args0[setdiff(names(fun.args0),"...")]#
	### Character vector with names of all arguments, including those without default values, but not "..."#
	argnames0 <- names(fun.args1)#
	### Character vector with names of arguments with defined values#
	argnames <- argnames0[!sapply(fun.args1,is,"name")]#
	### subset of fun.args with define values#
	fun.args2 <- fun.args1[!sapply(fun.args1,is,"name")]
fun.args2
argslist <- list(x=10,argB2=4)
argslist
names(argslist) %in% argnames0
names(list(z=10,argB3=4)) %in% argnames0
argslist[names(argslist) %in% argnames0]
argslist
if(!argslist){#
		# Check if any of the arguments in argslist are for this function#
		if(any( names(argslist) %in% argnames0)){#
			args.use <- c(argslist[names(argslist) %in% argnames0], fun.args1[!(argnames0 %in% names(argslist))])#
		} else{#
			# Not sure which one of these would work#
			# args.use <- fun.args2#
			args.use <- fun.args1#
		}#
	} else {#
		args.use <- fun.args1#
	}
!argslist
if(!is.null(argslist)){#
		# Check if any of the arguments in argslist are for this function#
		if(any( names(argslist) %in% argnames0)){#
			args.use <- c(argslist[names(argslist) %in% argnames0], fun.args1[!(argnames0 %in% names(argslist))])#
		} else{#
			# Not sure which one of these would work#
			# args.use <- fun.args2#
			args.use <- fun.args1#
		}#
	} else {#
		args.use <- fun.args1#
	}
args.use
form.expr=paste0(fun.name,"(",paste(paste0(args.use,"=", unname(c(args.use))),collapse=","),")")
paste0(args.use,"=", unname(c(args.use)))
paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",")
paste0(fun.name,"(", paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",") ,")")
paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",")
paste0(fun.name,"(",args.expr,")")
args.expr=paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",")
form.expr=paste0(fun.name,"(",args.expr,")")
fun.name
x
x <- "testfunB"
fun.name <- "testfunB"
fun.args0 <- formals(get("fun.name"))
fun.args0
form.expr=paste0(fun.name,"(",args.expr,")")
form.expr
evalfun <- function(fun.name,supplied=NULL,passed=NULL){#
	# Name of the function#
	#fun.name <- fun#
	# List with default values for all arguments of the function#
	fun.args0 <- formals(get("fun.name"))#
	# Keep arguments except for "..."#
	fun.args1 <- fun.args0[setdiff(names(fun.args0),"...")]#
	# Character vector with names of all arguments, including those without default values, but not "..."#
	argnames0 <- names(fun.args1)#
	# Character vector with names of arguments with defined values#
	argnames <- argnames0[!sapply(fun.args1,is,"name")]#
	# subset of fun.args with defined values#
	fun.args2 <- fun.args1[!sapply(fun.args1,is,"name")]#
	# Merging 'supplied' and 'passed'.#
	argslist <- c(supplied,passed)#
	if(!is.null(argslist)){#
		# Check if any of the arguments in argslist are for this function#
		if(any( names(argslist) %in% argnames0)){#
			args.use <- c(argslist[names(argslist) %in% argnames0], fun.args1[!(argnames0 %in% names(argslist))])#
		} else{#
			# Not sure which one of these would work#
			# args.use <- fun.args2#
			args.use <- fun.args1#
		}#
	} else {#
		args.use <- fun.args1#
	}#
	args.expr=paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",")#
	form.expr=paste0(fun.name,"(",args.expr,")")#
	# parse the expression#
	eval(parse(text= form.expr))#
}
testfunB <- function(x,argB1=10,argB2=10,...){#
	#fun.name <- list(names(sys.function(sys.parent())))#
	#fun.args <- formals()#
	return(argB1/argB2)#
}
testfunB <- function(argB1=10,argB2=10){#
	#fun.name <- list(names(sys.function(sys.parent())))#
	#fun.args <- formals()#
	return(argB1/argB2)#
}
testfunB <- function(argB1=10,argB2=10){#
	#fun.name <- list(names(sys.function(sys.parent())))#
	#fun.args <- formals()#
	return(argB1/argB2)#
}
evalfun("testfunB")
evalfun("testfunB")
evalfun("testfunB",list(argB1=5),list(argB2=4))
evalfun("testfunB",list(argB1=5),list(argB2=4, argB3))
evalfun("testfunB",list(argB1=5),list(argB2=4,argB3=10))
evalfun("testfunB",list("argB1"=5),list("argB2"=4,"argB3"=10))
testfun <- function(...){#
	moreArgs <- list(...)#
	evalfun("testfunB",passed=moreArgs)#
}
testfun(argA1=5, argA2=6, argB1=7, argB2=8)
testfunA <- function(argA1=10,argA2=10){#
	return(argA1*argA2)#
}#
#
testfunB <- function(argB1=10,argB2=10){#
	return(argB1/argB2)#
}
testfun <- function(...){#
	moreArgs <- list(...)#
	res1 <- evalfun("testfunA",passed=moreArgs)#
	res2 <- evalfun("testfunB",passed=moreArgs)#
	list(result1=res1,result2=res2)#
}
testfun(argA1=5, argA2=6, argB1=7, argB2=8)
evalfun("testfunA",list(...))
testfunAB <- function(...){#
    moreArgs <- list(...)#
    result1 <- evalfun("testfunA",list(...))#
    result2 <- evalfun("testfunB",list(...))#
    list("result1"=result1,"result"=result2)#
}
evalfun <- function(fun.name, passed=list(...), ...){#
	# List with default values for all arguments of the function#
	fun.args0 <- formals(get("fun.name"))#
	# Keep arguments except for "..."#
	fun.args1 <- fun.args0[setdiff(names(fun.args0),"...")]#
	# Character vector with names of all arguments, including those without default values, but not "..."#
	argnames0 <- names(fun.args1)#
	# Character vector with names of arguments with defined values#
	argnames <- argnames0[!sapply(fun.args1,is,"name")]#
	# subset of fun.args with defined values#
	fun.args2 <- fun.args1[!sapply(fun.args1,is,"name")]#
	# List of the arguments suppplied explicitely#
	supplied <- list(...)#
	# Merging 'supplied' and 'passed'.#
	argslist <- c(supplied,passed)#
	if(!is.null(argslist)){#
		# Check if any of the arguments in argslist are for this function#
		if(any( names(argslist) %in% argnames0)){#
			args.use <- c(argslist[names(argslist) %in% argnames0], fun.args1[!(argnames0 %in% names(argslist))])#
		} else{#
			# Not sure which one of these would work#
			# args.use <- fun.args2#
			args.use <- fun.args1#
		}#
	} else {#
		args.use <- fun.args1#
	}#
	args.expr=paste(paste0(names(args.use),"=", unname(c(args.use))), collapse=",")#
	form.expr=paste0(fun.name,"(",args.expr,")")#
	# parse the expression#
	eval(parse(text= form.expr))#
}
testfunA <- function(argA1=10,argA2=10){#
	return(argA1*argA2)#
}
testfunB <- function(argB1=10,argB2=10){#
	return(argB1/argB2)#
}
testfunAB <- function(...){#
    moreArgs <- list(...)#
    result1 <- evalfun("testfunA")#
    result2 <- evalfun("testfunB")#
    list("result1"=result1,"result"=result2)#
}
testfun(argA1=5, argA2=6, argB1=7, argB2=8)
testfun()
testfun(argA1=5)
devtools::document()
rm(list = c("evalfun"))
devtools::document()
formal("rcoords")
formals("rcoords")
names(formals("rcoords"))
names(formals("rcoords")), names(formals(adegenet::glSim))
names(formals(adegenet::glSim))
intersect(names(formals("rcoords")), names(formals(adegenet::glSim),names(formals(adegenet::glSim)))
intersect(names(formals("rcoords"), names(formals(adegenet::glSim),names(formals(adegenet::glSim))))
intersect( names(formals(adegenet::glSim)) ,  names(formals("rcoords")) )
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
?glSim
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
test4
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
length(test4)
lengths(test4)
test4
lengths(test4)
test4$supplied.list
supplied
test4$supplied
test4$argslist
tst4$args.use
test4$args.use
table(names(test4$args.use))
setdiff(names(test4$args.use), names(test4$argslist))
table(names(test4$argslist))
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
lengths(test4)
test4$form.expr
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
test4$form.expr
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
test$form.expr
test4$form.expr
table(names(test4$argslist))
lengths(test4)
table(names(test4$args.use))
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
table(names(test4$args.use))
test4$form.expr
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
test4$form.expr
table(names(test4$args.use))
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
table(names(test4$args.use))
test4$form.expr
devtools::document()
test4 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest4_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
devtools::document()
devtools::document()
test5 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest5_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
grid.newpage; grid.draw(test5[[2]])
grid.newpage; grid.draw(test5[[1]])
grid.newpage; grid.draw(test5[[3]])
dev.off()
bothmaps = test5[[3]]; pdf(file="Users/alyssaleinweber/Documents/simtest5_K2.pdf",width=8,height=6,onefile=TRUE); grid::grid.newpage(); grid::grid.draw(bothmaps); dev.off()
bothmaps = test5[[3]]; pdf(file="/Users/alyssaleinweber/Documents/simtest5_K2.pdf",width=8,height=6,onefile=TRUE); grid::grid.newpage(); grid::grid.draw(bothmaps); dev.off()
save.as <- "/Users/alyssaleinweber/Documents/simtest5_K2.vcf.gz"
save.as4 <- paste0(tools::file_path_sans_ext(save.as),"_simulated_coords_map.pdf")
save.as4
pdf(file="save.as4",width=8,height=6,onefile=TRUE)#
			grid::grid.newpage()#
			grid::grid.draw(bothmaps)#
		dev.off()
file.exists("simtest5_K2.vcf_simulated_coords_map.pdf")
save.as.name <- gsub("[.]+","",dirname(save.as))
save.as.name
save.as.name <- gsub("[.]+","",basename(save.as))
save.as.name
save.as.name <- gsub("[.].+","",basename(save.as))
save.as.name
save.as.name <- file.path(dirname(save.as),gsub("[.].+","",basename(save.as)),"_simulated_coords_map.pdf")
save.as.name
save.as4 <- file.path(dirname(save.as),paste0(gsub("[.].+","",basename(save.as)),"_simulated_coords_map.pdf"))
save.as4
save.as3 <- file.path(dirname(save.as),paste0(gsub("[.].+","",basename(save.as)),"_simulated_coords.txt"))
save.as3
save.as3 <- file.path(dirname(save.as),paste0(gsub("[.vcf].+","",basename(save.as)),"_simulated_coords.txt"))
save.as3
save.as4 <- file.path(dirname(save.as),paste0(gsub("[.vcf].+","",basename(save.as)),"_simulated_coords_map.pdf"))
save.as4
file.exists(save.as4)
pdf(file="save.as4",width=8,height=6,onefile=TRUE)#
			grid::grid.newpage()#
			grid::grid.draw(bothmaps)#
		dev.off()
length(bothmaps)
pdf(file="save.as4",width=8,height=6,onefile=TRUE)#
			#grid::grid.newpage()#
			grid::grid.draw(bothmaps)#
		dev.off()
pdf(file=save.as4,width=8,height=6,onefile=TRUE)#
			grid::grid.newpage()#
			grid::grid.draw(bothmaps)#
		dev.off()
devtools::document()
test6 <- sim.vcf(x= example_vcf_path, save.as="/Users/alyssaleinweber/Documents/simtest6_K2.vcf.gz",n.ind=100,n.snps=1000,K=2, sim.coords=TRUE)
q()
