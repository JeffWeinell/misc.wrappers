plot(biplots.da.list.i[[2]])
devtools::document()
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.5,hideperimeter=F)#
			}
plot(biplots.da.list.i[[2]])
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=1,hideperimeter=F)#
			}
plot(biplots.da.list.i[[2]])
12*0.5
devtools::document()
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=1,hideperimeter=F)#
			}
plot(biplots.da.list.i[[2]])
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.5,hideperimeter=F)#
			}
plot(biplots.da.list.i[[2]])
for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=F)#
			}
plot(biplots.da.list.i[[2]])
devtools::document()
for(K in 2:max.clusters){#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		### density plots of discriminant functions#
		density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
		for(z in 1:dapc.pcabest.K$n.da){#
			density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
		}#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=F)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		##### ggplot density plots of principle components#
		density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
		for(z in 1:dapc.pcabest.K$n.pca){#
			density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
		}#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=F)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K
da.density.arranged      <- dapc.plot.arrange(da.densityPlot)#
	pca.densityPlot.arranged <- dapc.plot.arrange(pca.densityPlot,variable="PC")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
index.mat
index.matrix
t(index.matrix)
layout.mat
t(layout.mat)
devtools::document()
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=TRUE)
index.matrix
devtools::document()
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
devtools::document()
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=c(1,2),col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
devtools::document()
for(K in 2:max.clusters){#
		i=(K-1)#
		dapc.pcabest.K      <- adegenet::dapc(genind, grp.mat[,i],n.pca=best.npca[i],n.da=5)#
		dapc.pcabest.list[[i]] <- dapc.pcabest.K#
		posterior           <- dapc.pcabest.K$posterior#
		q.matrix            <- posterior#
		posterior.list[[i]] <- posterior#
		posterior.df        <- data.frame(indv=rep(rownames(posterior),ncol(posterior)), pop=rep(colnames(posterior),each=nrow(posterior)), assignment=c(posterior),K=K)#
		q.df[[i]]           <- posterior.df#
		##### ggplot scatterplots of discriminant functions#
		####
	#	scatterPlot.i       <- ggscatter.dapc(dapc.pcabest.K,col=myCols,legend=F,cstar=1,cpoint=4,label=T)#
	#	scatterPlot[[i]]    <- scatterPlot.i#
		### density plots of discriminant functions#
		density.da.list.i <- list(); length(density.da.list.i) <- dapc.pcabest.K$n.da#
		for(z in 1:dapc.pcabest.K$n.da){#
			density.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
		}#
		### biplots of discriminant functions#
		if(dapc.pcabest.K$n.da>1){#
			da.pairs.i     <- pset(x=1:dapc.pcabest.K$n.da,min.length=2,max.length=2)#
			da.pairs.mat.i    <- do.call(rbind,da.pairs.i)#
			da.psets[[i]]     <- da.pairs.mat.i#
			da.layout.mat.i   <- matrix(data=NA,nrow=max(da.pairs.mat.i[,1]),ncol=max(da.pairs.mat.i[,2]))#
			for(j in 1:length(da.pairs.i)){#
				da.layout.mat.i[da.pairs.mat.i[j,1],da.pairs.mat.i[j,2]] <- j#
			}#
			da.layout.mat[[i]] <- da.layout.mat.i[,c(2:ncol(da.layout.mat.i)),drop=F]#
			biplots.da.list.i <- list(); length(biplots.da.list.i) <- length(da.pairs.i)#
			for(z in 1:length(da.pairs.i)){#
				da.pairs.i.z <- da.pairs.i[[z]]#
				biplots.da.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,xax=da.pairs.i.z[1],yax=da.pairs.i.z[2],col=myCols,legend=F,cstar=1,cpoint=4,label=F,show.title=F,varname="DF",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.da.list.i  <- NULL#
			da.psets[[i]]      <- NULL#
			da.layout.mat[[i]] <- NULL#
		}#
		##### ggplot density plots of principle components#
		density.pca.list.i <- list(); length(density.pca.list.i) <- dapc.pcabest.K$n.pca#
		for(z in 1:dapc.pcabest.K$n.pca){#
			density.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=z,yax=z,col=myCols,legend=F,show.title=F,hideperimeter=T)#
		}#
		### ggplot biplots of principle components#
		if(dapc.pcabest.K$n.pca>1){#
			pca.pairs.i        <- pset(x=1:dapc.pcabest.K$n.pca,min.length=2,max.length=2)#
			pca.pairs.mat.i    <- do.call(rbind,pca.pairs.i)#
			pca.psets[[i]]     <- pca.pairs.mat.i#
			pca.layout.mat.i   <- matrix(data=NA,nrow=max(pca.pairs.mat.i[,1]),ncol=max(pca.pairs.mat.i[,2]))#
			for(j in 1:length(pca.pairs.i)){#
				pca.layout.mat.i[pca.pairs.mat.i[j,1],pca.pairs.mat.i[j,2]] <- j#
			}#
			pca.layout.mat[[i]] <- pca.layout.mat.i[,c(2:ncol(pca.layout.mat.i)),drop=F]#
			biplots.pca.list.i <- list(); length(biplots.pca.list.i) <- length(pca.pairs.i)#
			for(z in 1:length(pca.pairs.i)){#
				pca.pairs.i.z           <- pca.pairs.i[[z]]#
				biplots.pca.list.i[[z]] <- ggscatter.dapc(dapc.pcabest.K,vartype="pc",xax=pca.pairs.i.z[1],yax=pca.pairs.i.z[2],col=myCols,legend=F,cstar=0,cpoint=4,label=F,show.title=F,varname="PC",axis.title.cex=0.7,hideperimeter=T)#
			}#
		} else {#
			biplots.pca.list.i  <- NULL#
			pca.psets[[i]]      <- NULL#
			pca.layout.mat[[i]] <- NULL#
		}#
		posterior.gg        <- ggplot2::ggplot(posterior.df, ggplot2::aes(fill= pop, x= assignment, y=indv)) + ggplot2::geom_bar(position="stack", stat="identity") + ggplot2::theme_classic() + ggplot2::theme(axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank()) + ggplot2::labs(x = "Membership Probability",y="",fill="Cluster",title=paste0("K = ",K,"; PCs retained = ",best.npca[i])) + ggplot2::scale_fill_manual(values=myCols[1:K])#
		admixturePlot[[i]]  <- posterior.gg#
		#indv.KmaxPosterior <- apply(X=q.matrix, MARGIN=1, FUN=function(x){which(x==max(x))})#
		indv.maxPosterior  <- apply(X=q.matrix, MARGIN=1, FUN=function(x){max(x)})#
		labels             <- rep("",nrow(posterior.df))#
		labels[posterior.df[,"assignment"] %in% indv.maxPosterior] <- "+"#
		assignment.K       <- ggplot2::ggplot(data=posterior.df, ggplot2::aes(x= pop, y=indv,fill=assignment)) + ggplot2::geom_tile(color="gray") + ggplot2::theme_classic() + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), axis.text.y = ggplot2::element_text(size = label.size), panel.grid.major = ggplot2::element_blank(), panel.grid.minor = ggplot2::element_blank(), panel.background = ggplot2::element_blank(), legend.position = "none", ) + ggplot2::labs(title = paste0("K = ",K,"; PCs retained = ", best.npca[i]), x="Clusters", y="") + ggplot2::scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = 0.5) + ggplot2::geom_text(label=labels)#
		assignmentPlot[[i]]  <- assignment.K#
		if(!is.null(coords)){#
			my.palette      <- tess3r::CreatePalette(myCols[1:K], 9)#
			tess3r.qmat     <- suppressWarnings(tess3r::as.qmatrix(q.matrix))#
			coords.mat      <- as.matrix(coords)#
			mapplot.i       <- tess3r::ggtess3Q(tess3r.qmat,coords.mat, interpolation.model = tess3r::FieldsKrigModel(10),resolution = c(500,500), col.palette = my.palette, window=c(x.min,x.max,y.min,y.max),background=TRUE,map.polygon=world_sp)#
			mapplot[[i]]    <- mapplot.i + ggplot2::theme_classic() + ggplot2::labs(title=paste0("Ancestry coefficients; K=",K), x="latitude", y="longitude") + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + current.gg.sf + ggplot2::geom_point(data = coords, ggplot2::aes(x = Lon, y = Lat), size = 1, shape = 21, fill = "black")#
		}#
		da.densityPlot[[i]]  <- density.da.list.i#
		da.biPlot[[i]]       <- biplots.da.list.i#
		pca.densityPlot[[i]] <- density.pca.list.i#
		pca.biPlot[[i]]      <- biplots.pca.list.i#
	}#
	### Plots of DF or PC density for each given K#
	da.density.arranged      <- dapc.plot.arrange(da.densityPlot)#
	pca.densityPlot.arranged <- dapc.plot.arrange(pca.densityPlot,variable="PC")#
	### Plots of DF vs DF or PC vs PC for each pairwise combination, for given K#
	if(any(lengths(da.biPlot)>0)){#
		rangeK.da <- c(2:kmax)[which(lengths(da.biPlot)>0)]#
		n.da      <- sapply(X=da.psets[rangeK.da-1],FUN=max,na.rm=TRUE)#
		names.bottom.da  <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",1:(n.da[[x]]-1))})#
		names.left.da <- lapply(X=1:length(n.da),FUN=function(x){paste0("DF",2:(n.da[[x]]))})#
		da.biplot.arranged <- lapply(rangeK.da, FUN=function(z){dapc.biplot.arrange(da.biPlot,K=z,layout.mat=da.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.da[[which(rangeK.da==z)]],row.labels.left=names.left.da[[which(rangeK.da==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of discriminant functions"),NULL))})#
	} else {#
		da.biplot.arranged <- NULL#
	}#
	if(any(lengths(pca.biPlot)>0)){#
		rangeK.pca <- c(2:kmax)[which(lengths(pca.biPlot)>0)]#
		#n.pca      <- sapply(X=pca.layout.mat[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		n.pca               <- sapply(X=pca.psets[rangeK.pca-1],FUN=max,na.rm=TRUE)#
		names.bottom.pca    <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",1:(n.pca[[x]]-1))})#
		names.left.pca      <- lapply(X=1:length(n.pca),FUN=function(x){paste0("PC",2:(n.pca[[x]]))})#
		pca.biPlot.arranged <- lapply(rangeK.pca, FUN=function(z){dapc.biplot.arrange(pca.biPlot,K=z,layout.mat=pca.layout.mat[[z-1]],use.diag=NULL,col.labels.bottom=names.bottom.pca[[which(rangeK.pca==z)]],row.labels.left=names.left.pca[[which(rangeK.pca==z)]],outer.text=list(NULL,NULL,paste0("K=",z,"; Biplots of retained principle components"),NULL))})#
		#pca.biPlot.arranged      <- dapc.biplot.arrange(pca.biPlot)#
	} else {#
		pca.biPlot.arranged <- NULL#
	}
plot(pca.biPlot.arranged[[1]])
devtools::document()
plot(da.biPlot.arranged[[1]])
da.biPlot.arranged
da.biplot.arranged
plot(da.biplot.arranged[[1]])
plot(da.biplot.arranged[[2]])
plot(da.biplot.arranged[[3]])
plot(da.biplot.arranged[[4]])
plot(da.biplot.arranged[[5]])
plot(da.biplot.arranged[[4]])
n.da
n.pca
plot(da.biplot.arranged[[5]])
plot(da.biplot.arranged[[4]])
plot(pca.biPlot.arranged[[4]])
devtools::document()
save.as
q.df    <- do.call(rbind,q.df)#
	#dapc.df <- do.call(rbind,dapc.df)#
	if(".Qlog" %in% include.out){#
		write.table(x=q.df,file=paste0(tools::file_path_sans_ext(save.as),".Qlog"),row.names=FALSE,col.names=TRUE,quote=FALSE,sep="\t")#
	}#
	#if(bestK>1){
dapc.componentPlots <- c(da.density.arranged,da.biplot.arranged,pca.densityPlot.arranged,pca.biplot.arranged)
pca.biplot.arranged <- pca.biPlot.arranged
dapc.componentPlots <- c(da.density.arranged,da.biplot.arranged,pca.densityPlot.arranged,pca.biplot.arranged)
length(dapc.componentPlots)
plot(dapc.componentPlots[[1])
plot(dapc.componentPlots[[1]])
class(dapc.componentPlots[[1]])
dapc.componentPlots <- do.call(c, c(da.density.arranged,da.biplot.arranged,pca.densityPlot.arranged,pca.biplot.arranged))
length(dapc.componentPlots)
plot(dapc.componentPlots)
class(da.density.arranged0
class(da.density.arranged)
plot(da.density.arranged[[1]])
plot(da.density.arranged[1])
plot(da.density.arranged)
plot(pca.density.arranged)
pca.density.arranged <- dapc.plot.arrange(pca.densityPlot,variable="PC")
plot(pca.density.arranged)
plot(da.density.arranged)
devtools::document()
lengths(pca.densityPlot)
lengths(da.densityPlot)
plot(pca.density.arranged)
2:(length(lengths(da.densityPlot))+1)
n.da
n.da.density      <- max(lengths(da.densityPlot),na.rm=TRUE)
n.da.density
rangeK.da.density <- 2:(length(lengths(da.densityPlot))+1)#
	n.da.density      <- max(lengths(da.densityPlot),na.rm=TRUE)#
	rangeK.pca.density <- 2:(length(lengths(pca.densityPlot))+1)#
	n.pca.density      <- max(lengths(pca.densityPlot),na.rm=TRUE)
rangeK.da.density#
	n.da.density      #
	rangeK.pca.density#
	n.pca.density
lengths(da.densityPlot)
x=pca.densityPlot#
variable="PC"
layout.mat=NULL#
row.labels.left=NULL#
col.labels.top=NULL#
row.labels.right=NULL#
col.labels.bottom=NULL#
pad=0.1#
K=NULL#
outer.text=list(NULL,NULL,paste0("Principle component densities vs. K"), NULL)
numplots   <- lengths(x)#
	stat.max   <- max(numplots)#
	#layout.mat0 <- matrix(data=NA,nrow=length(numplots), ncol=stat.max)#
	#for(i in 1:length(numplots)){#
	#	if(numplots[i]==0){#
	#		next#
	#	} else {#
	#		layout.mat0[i,1:numplots[i]] <- rep(1,numplots[i])#
	#	}#
	#}#
	#vals       <- c(t(layout.mat0))#
	#ent.update <- which(vals!=0)#
	#vals[ent.update] <- 1:length(ent.update)#
	vals <- do.call(c,lapply(1:length(numplots),FUN=function(x){c(rep(1, numplots[x]),rep(NA,c(stat.max-numplots)[x]))}))#
	vals[which(vals!=0)] <- 1:length(which(vals!=0))#
	gg.list    <- do.call(c, x)#
	grobs.list <- lapply(gg.list, FUN=ggplot2::ggplotGrob)#
	layout.mat <- matrix(data=1:length(vals),nrow=length(numplots), ncol=stat.max,byrow=TRUE)#
	kmax=nrow(layout.mat)+1#
	stat.max <- ncol(layout.mat)#
	col1.vals  <- c(layout.mat[,1])[-1]#
	row1.vals  <- c(layout.mat[1,])[-1]#
	m1n1.names <- c("K=2",paste0(variable,"1"))
if(stat.max>1){#
		col1.names     <- paste0(variable,2:stat.max)#
		col.labels.top <- col1.names#
	} else {#
		col1.names <- NULL#
	}#
	if(kmax>2){#
		row1.names      <- paste0("K=",3:kmax)#
		row.labels.left <- row1.names#
	} else {#
		row1.names <- NULL#
	}
row.labels.left
col.labels.top
nm  <- nrow(layout.mat)#
	nn  <- ncol(layout.mat)#
	len <- nm*nn
nm
nn
len
if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}
empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)
index.matrix
empty.matrix
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}#
	if(nn>1){#
		if(2 %in% use.diag & nm==nn){#
			left.mat   <- empty.matrix#
			left.mat[diag(index.matrix)] <- row.labels.left#
		} else {#
			left.mat   <- unname(cbind(row.labels.left,matrix(data="",nrow=nm,ncol=(nn-1))))#
		}#
		if(4 %in% use.diag & nm==nn){#
			right.mat  <- empty.matrix#
			right.mat[diag(index.matrix)] <- row.labels.right#
		} else {#
			right.mat  <- unname(cbind(matrix(data="",nrow=nm,ncol=(nn-1)),row.labels.right))#
		}#
	} else {#
		left.mat   <- matrix(data=row.labels.left,ncol=1)#
		right.mat  <- matrix(data=row.labels.right,ncol=1)#
	}
col.labels.top
nn
ncol(layout.mat)
if(stat.max>1){#
		col1.names     <- paste0(variable,2:stat.max)#
		row.labels.left <- row1.names#
	} else {#
		col1.names <- NULL#
	}#
	if(kmax>2){#
		row1.names      <- paste0("K=",3:kmax)#
		col.labels.top <- col1.names#
	} else {#
		row1.names <- NULL#
	}#
#
	nm  <- nrow(layout.mat)#
	nn  <- ncol(layout.mat)#
	len <- nm*nn#
	#vals     <- c(t(layout.mat))#
	#numplots <- length(vals)#
	if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}#
	### character matrix of empty strings#
	empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)#
	### Matrices holding the bottom, left, top, and right labels, respectively, for each plot.
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}
nm
nn
col.labels.top
col.labels.top  <- paste0(variable,2:stat.max)#
	row.labels.left <- paste0("K=",2:kmax)
if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}#
	### character matrix of empty strings#
	empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}
col.labels.top
nm
nn
col.labels.top  <- paste0(variable,1:stat.max)#
	row.labels.left <- paste0("K=",2:kmax)
nm  <- nrow(layout.mat)#
	nn  <- ncol(layout.mat)#
	len <- nm*nn#
	#vals     <- c(t(layout.mat))#
	#numplots <- length(vals)#
	if(is.null(row.labels.left)){#
		row.labels.left <- rep("",nrow(layout.mat))#
	}#
	if(is.null(row.labels.right)){#
		row.labels.right <- rep("",nrow(layout.mat))#
	}#
	if(is.null(col.labels.top)){#
		col.labels.top <- rep("",ncol(layout.mat))#
	}#
	if(is.null(col.labels.bottom)){#
		col.labels.bottom <- rep("",ncol(layout.mat))#
	}#
	### character matrix of empty strings#
	empty.matrix <- matrix(data="",nrow=nm,ncol=nn)#
	### Index assigned to each plot of the table of plots#
	index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=FALSE)#
	### Matrices holding the bottom, left, top, and right labels, respectively, for each plot.
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}
if(nn>1){#
		if(2 %in% use.diag & nm==nn){#
			left.mat   <- empty.matrix#
			left.mat[diag(index.matrix)] <- row.labels.left#
		} else {#
			left.mat   <- unname(cbind(row.labels.left,matrix(data="",nrow=nm,ncol=(nn-1))))#
		}#
		if(4 %in% use.diag & nm==nn){#
			right.mat  <- empty.matrix#
			right.mat[diag(index.matrix)] <- row.labels.right#
		} else {#
			right.mat  <- unname(cbind(matrix(data="",nrow=nm,ncol=(nn-1)),row.labels.right))#
		}#
	} else {#
		left.mat   <- matrix(data=row.labels.left,ncol=1)#
		right.mat  <- matrix(data=row.labels.right,ncol=1)#
	}
grobsTable.list <- list(); length(grobsTable.list) <- length(vals)
for(i in 1:length(vals)){#
		#### Either creating an empty grob or getting a grob from grobs.list#
		if(is.na(vals[i])){#
			grob.i          <- grid::rectGrob(gp=grid::gpar(col=NA))#
		} else {#
			grob.i          <- grobs.list[[vals[i]]]#
		}#
		z <- which(index.matrix == i, arr.ind=TRUE)#
		labels.i.list  <- list(bottom.mat[z],left.mat[z],top.mat[z],right.mat[z])#
		if(is.null(use.diag)){#
			labels.i.list2 <- list(); length(labels.i.list2) <- 4#
			for(j in 1:4){#
				if(labels.i.list[[j]]!=""){#
					labels.i.list2[[j]] <- labels.i.list[[j]]#
				}#
			}#
		} else {#
			labels.i.list2 <- labels.i.list#
		}#
	#	grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=bottom.mat[z],left=left.mat[z],top=top.mat[z],right=right.mat[z])#
		grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=labels.i.list2[[1]],left=labels.i.list2[[2]],top=labels.i.list2[[3]],right=labels.i.list2[[4]])#
	}
grobs.arranged0 <- gridExtra::arrangeGrob(grobs=grobsTable.list,layout_matrix=index.matrix,padding=unit(pad,"line"),respect=TRUE)
if(!is.null(unlist(outer.text))){#
		grobs.arranged <- gridExtra::arrangeGrob(grobs.arranged0,bottom=outer.text[[1]],left=outer.text[[2]],top=outer.text[[3]],right=outer.text[[4]])#
	} else {#
		grobs.arranged <- grobs.arranged0#
	}
plot(grobs.arranged)
layout.mat
is.null(use.diag)
use.diag
use.diag <- NULL
grobsTable.list <- list(); length(grobsTable.list) <- length(vals)#
	for(i in 1:length(vals)){#
		#### Either creating an empty grob or getting a grob from grobs.list#
		if(is.na(vals[i])){#
			grob.i          <- grid::rectGrob(gp=grid::gpar(col=NA))#
		} else {#
			grob.i          <- grobs.list[[vals[i]]]#
		}#
		z <- which(index.matrix == i, arr.ind=TRUE)#
		labels.i.list  <- list(bottom.mat[z],left.mat[z],top.mat[z],right.mat[z])#
		if(is.null(use.diag)){#
			labels.i.list2 <- list(); length(labels.i.list2) <- 4#
			for(j in 1:4){#
				if(labels.i.list[[j]]!=""){#
					labels.i.list2[[j]] <- labels.i.list[[j]]#
				}#
			}#
		} else {#
			labels.i.list2 <- labels.i.list#
		}#
	#	grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=bottom.mat[z],left=left.mat[z],top=top.mat[z],right=right.mat[z])#
		grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=labels.i.list2[[1]],left=labels.i.list2[[2]],top=labels.i.list2[[3]],right=labels.i.list2[[4]])#
	}
grobs.arranged0 <- gridExtra::arrangeGrob(grobs=grobsTable.list,layout_matrix=index.matrix,padding=unit(pad,"line"),respect=TRUE)#
	if(!is.null(unlist(outer.text))){#
		grobs.arranged <- gridExtra::arrangeGrob(grobs.arranged0,bottom=outer.text[[1]],left=outer.text[[2]],top=outer.text[[3]],right=outer.text[[4]])#
	} else {#
		grobs.arranged <- grobs.arranged0#
	}
plot(grobs.arranged)
index.matrix <- matrix(1:length(layout.mat),ncol=ncol(layout.mat),byrow=TRUE)
if(nm>1){#
		if(1 %in% use.diag & nm==nn){#
			bottom.mat <- empty.matrix#
			bottom.mat[diag(index.matrix)] <- col.labels.bottom#
		} else {#
			bottom.mat <- unname(rbind(matrix(data="",nrow=(nm-1),ncol=nn),col.labels.bottom))#
		}#
		if(3 %in% use.diag & nm==nn){#
			top.mat <- empty.matrix#
			top.mat[diag(index.matrix)] <- col.labels.top#
		} else {#
			top.mat    <- unname(rbind(col.labels.top,matrix(data="",nrow=(nm-1),ncol=nn)))#
		}#
	} else {#
		bottom.mat <- matrix(data=col.labels.bottom,nrow=1)#
		top.mat    <- matrix(data=col.labels.top,nrow=1)#
	}#
	if(nn>1){#
		if(2 %in% use.diag & nm==nn){#
			left.mat   <- empty.matrix#
			left.mat[diag(index.matrix)] <- row.labels.left#
		} else {#
			left.mat   <- unname(cbind(row.labels.left,matrix(data="",nrow=nm,ncol=(nn-1))))#
		}#
		if(4 %in% use.diag & nm==nn){#
			right.mat  <- empty.matrix#
			right.mat[diag(index.matrix)] <- row.labels.right#
		} else {#
			right.mat  <- unname(cbind(matrix(data="",nrow=nm,ncol=(nn-1)),row.labels.right))#
		}#
	} else {#
		left.mat   <- matrix(data=row.labels.left,ncol=1)#
		right.mat  <- matrix(data=row.labels.right,ncol=1)#
	}#
	grobsTable.list <- list(); length(grobsTable.list) <- length(vals)#
	for(i in 1:length(vals)){#
		#### Either creating an empty grob or getting a grob from grobs.list#
		if(is.na(vals[i])){#
			grob.i          <- grid::rectGrob(gp=grid::gpar(col=NA))#
		} else {#
			grob.i          <- grobs.list[[vals[i]]]#
		}#
		z <- which(index.matrix == i, arr.ind=TRUE)#
		labels.i.list  <- list(bottom.mat[z],left.mat[z],top.mat[z],right.mat[z])#
		if(is.null(use.diag)){#
			labels.i.list2 <- list(); length(labels.i.list2) <- 4#
			for(j in 1:4){#
				if(labels.i.list[[j]]!=""){#
					labels.i.list2[[j]] <- labels.i.list[[j]]#
				}#
			}#
		} else {#
			labels.i.list2 <- labels.i.list#
		}#
	#	grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=bottom.mat[z],left=left.mat[z],top=top.mat[z],right=right.mat[z])#
		grobsTable.list[[i]] <- gridExtra::arrangeGrob(grob.i,bottom=labels.i.list2[[1]],left=labels.i.list2[[2]],top=labels.i.list2[[3]],right=labels.i.list2[[4]])#
	}#
	grobs.arranged0 <- gridExtra::arrangeGrob(grobs=grobsTable.list,layout_matrix=index.matrix,padding=unit(pad,"line"),respect=TRUE)#
	if(!is.null(unlist(outer.text))){#
		grobs.arranged <- gridExtra::arrangeGrob(grobs.arranged0,bottom=outer.text[[1]],left=outer.text[[2]],top=outer.text[[3]],right=outer.text[[4]])#
	} else {#
		grobs.arranged <- grobs.arranged0#
	}
plot(grobs.arranged)
devtools::document()
da.density.arranged  <- dapc.plot.arrange(da.densityPlot,variable="DF",outer.text=list(NULL,NULL,paste0("Density of discriminant function vs. K"), NULL))
plot(da.density.arranged)
devtools::document()
da.density.arranged  <- dapc.plot.arrange(da.densityPlot,variable="DF",outer.text=list(NULL,NULL,paste0("Density of discriminant function vs. K"), NULL))
plot(da.density.arranged)
da.density.arranged[1:2,1:2]
dim(da.density.arranged)
dim(grobs.arranged0)
plot(grobs.arranged0)
plot(grobs.arranged0[1:2,1:2])
nrow(grobs.arranged0)
devtools::document()
devtools::document()
vcf
include.out
probs.out
probs.out=NULL
coords
coords2
coords=coords2
kmax=7
reps=2
save.as
save.as <- "/Users/alyssaleinweber/Documents/Chapter4_Bicol-vs-Luzon/DAPC/test3.pdf"
dapc.componentPlots <- c(pca.density.arranged,pca.biplot.arranged,da.density.arranged,da.biplot.arranged)
length(dapc.componentPlots)
plot(dapc.componentPlots[1])
plot(dapc.componentPlots[[1]])
names(dapc.componentPlots)
dapc.componentPlots <- do.call(list,pca.density.arranged,pca.biplot.arranged,da.density.arranged,da.biplot.arranged)
dapc.componentPlots <- do.call(list,list(pca.density.arranged,pca.biplot.arranged,da.density.arranged,da.biplot.arranged))
length(dapc.componentPlots)
plot(dapc.componentPlots)
plot(dapc.componentPlots[[1]])
plot(dapc.componentPlots[[2]])
class(dapc.componentPlots[[2]])
length(dapc.componentPlots[[2]])
test <- do.call(c,pca.biplot.arranged)
class(test)
length(test)
class(test[[1]])
test <- c(pca.biplot.arranged,da.biplot.arranged)
length(pca.biplot.arranged)
length(da.biplot.arranged)
length(test)
test <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
length(test)
plot(test[[1]])
plot(test[[2]])
plot(test[[3]])
dapc.componentPlots <- c(list(pca.density.arranged,da.density.arranged),pca.biplot.arranged,da.biplot.arranged)
length(dapc.componentPlots)
result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot)
pdf(height=6,width=10,file=save.as,onefile=TRUE)
lapply(X=result,FUN=function(x){ifelse(is(x,"gtable"),grid.draw(x),print(x))})
?grid.draw
dev.off()
dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE)
lapply(X=result,FUN=function(x){ifelse(is(x,"gtable"),grid::grid.draw(x),print(x))})
x
dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE)
lapply(X=result,FUN=print)
dev.off()
lapply(result,class)
devtools::document()
pdf(height=6,width=10,file=save.as,onefile=TRUE)
length(dapc.componentPlots)
lapply(X=dapc.componentPlots,FUN=grid::grid.draw)
dev.off()
library(grid)
?grid.draw
pdf(height=6,width=10,file=save.as,onefile=TRUE);grid.draw(dapc.componentPlots);dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE);grid.draw(dapc.componentPlots[[1]]);dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE);grid.draw(dapc.componentPlots[[2]]);dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE);lapply(X=1:length(dapc.componentPlots),FUN=function(x){grid::grid.draw(dapc.componentPlots[[x]]);grid.newpage()});dev.off()
pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		#lapply(X=1:length(dapc.componentPlots),FUN=function(x){})#
		for(i in 1:length(dapc.componentPlots)){#
			grid::grid.draw(dapc.componentPlots[[i]])#
			if(i < length(dapc.componentPlots)){#
				grid.newpage()#
			}#
		}#
		dev.off()
length(BICPlot)
plot(BICPlot)
BICPlot
class(BICPlot)
dev.off()
dev.off()
BICPlot
length(BICPlot)
class(BICPlot)
class(grp.plot2)
results1 <- list(BICPlot,grp.plot2)#
	results2 <- dapc.componentPlots#
	if(!is.null(coords)){#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot,mapplot)#
		results3 <- c(admixturePlot,assignmentPlot,mapplot)#
	} else {#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot)#
		results3 <- c(admixturePlot,assignmentPlot)#
	}
".pdf" %in% include.out
pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		#lapply(X=1:length(dapc.componentPlots),FUN=function(x){})#
		lapply(X=results1,FUN=print)#
		for(i in 1:length(results2)){#
			grid::grid.draw(results2[[i]])#
			if(i < length(results2)){#
				grid.newpage()#
			}#
		}#
		lapply(X=results1,FUN=print)#
		dev.off()
dapc.plot.arrange
results1.grobs.list <- lapply(results1, FUN=ggplot2::ggplotGrob)
results1.gtable <- lapply(X=results1.grobs.list,FUN=gridExtra::arrangeGrob)
if(!is.null(coords)){#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot,mapplot)#
		results3 <- c(admixturePlot,assignmentPlot,mapplot)#
	} else {#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot)#
		results3 <- c(admixturePlot,assignmentPlot)#
	}#
	results3.grobs.list <- lapply(results3, FUN=ggplot2::ggplotGrob)#
	results3.gtable     <- lapply(X=results3.grobs.list,FUN=gridExtra::arrangeGrob)
class(results3)
sapply(results3,class)
!is.null(coords)
coords
coords=NULL
if(!is.null(coords)){#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot,mapplot)#
		results3 <- c(admixturePlot,assignmentPlot,mapplot)#
	} else {#
#		result <- c(list(BICPlot,grp.plot2),dapc.componentPlots,admixturePlot,assignmentPlot)#
		results3 <- c(admixturePlot,assignmentPlot)#
	}#
	results3.grobs.list <- lapply(results3, FUN=ggplot2::ggplotGrob)#
	results3.gtable     <- lapply(X=results3.grobs.list,FUN=gridExtra::arrangeGrob)
class(results3.gtable )
test<-c(results1.gtable,results2,results3.gtable)
class(test)
length(test)
length(results1.gtable)
length(results2)
length(results3.gtable)
result <- c(results1.gtable,results2,results3.gtable)
if(".pdf" %in% include.out){#
		#pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		#lapply(X=result,FUN=print)#
	#	#lapply(X=result,FUN=function(x){ifelse(is(x,"gtable"),grid::grid.draw(x),print(x))})#
		#dev.off()#
		pdf(height=6,width=10,file=save.as,onefile=TRUE)#
		#lapply(X=1:length(dapc.componentPlots),FUN=function(x){})#
		#lapply(X=results1,FUN=print)#
		for(i in 1:length(result)){#
			grid::grid.draw(result[[i]])#
			if(i < length(result)){#
				grid.newpage()#
			}#
		}#
		#lapply(X=results1,FUN=print)#
		dev.off()#
	}
devtools:document()
devtools::document()
q()
